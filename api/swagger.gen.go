// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Base defines model for Base.
type Base struct {

	// Вeрсия ответа сервиса
	Version *string `json:"version,omitempty"`
}

// ComingShoppingsProperty defines model for ComingShoppingsProperty.
type ComingShoppingsProperty struct {
	Validation *ComingShoppingsValidation `json:"validation,omitempty"`
}

// ComingShoppingsValidation defines model for ComingShoppingsValidation.
type ComingShoppingsValidation struct {
	Date *string `json:"date,omitempty"`
}

// DeleteIds defines model for Delete_ids.
type DeleteIds struct {

	// Массив идентификаторв для удаления
	Ids []int `json:"ids"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// Error400 defines model for Error_400.
type Error400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error401 defines model for Error_401.
type Error401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error404 defines model for Error_404.
type Error404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors []interface{} `json:"errors"`

	// сообщение об ошибке
	Message string `json:"message"`
}

// Error405 defines model for Error_405.
type Error405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors *[]interface{} `json:"errors,omitempty"`

	// сообщение ответа
	Message *string `json:"message,omitempty"`
}

// Error500 defines model for Error_500.
type Error500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors interface{} `json:"errors"`

	// сообщение ответа
	Message string `json:"message"`
}

// Shopping defines model for Shopping.
type Shopping struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// ShoppingProperty defines model for ShoppingProperty.
type ShoppingProperty struct {
	Validation *ShoppingValidation `json:"validation,omitempty"`
}

// ShoppingValidation defines model for ShoppingValidation.
type ShoppingValidation struct {
	Date    *string `json:"date,omitempty"`
	Name    *string `json:"name,omitempty"`
	OwnerID *string `json:"ownerID,omitempty"`
	Time    *string `json:"time,omitempty"`
}

// ShoppingItem defines model for Shopping_item.
type ShoppingItem struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParamsWithId)
	ShoppingItemParamsWithId
}

// ShoppingParams defines model for Shopping_params.
type ShoppingParams struct {

	// Дата покупки
	Date string `json:"date"`

	// Наименование магазина
	Name string `json:"name"`

	// Владелец покупки
	OwnerID int `json:"ownerID"`

	// Время совершения покупки
	Time string `json:"time"`
}

// ShoppingWithId defines model for Shopping_with_id.
type ShoppingWithId struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema

	// Идентификатор покупки
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// Success defines model for Success.
type Success struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema

	// Ошибки ответа
	Errors []interface{} `json:"errors"`

	// Сообщение ответа
	Message string `json:"message"`
}

// ShoppingDaysErrors defines model for shoppingDaysErrors.
type ShoppingDaysErrors struct {
	Validation *ShoppingDaysValidation `json:"validation,omitempty"`
}

// ShoppingDaysValidation defines model for shoppingDaysValidation.
type ShoppingDaysValidation struct {
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// ShoppingItemParams defines model for shoppingItemParams.
type ShoppingItemParams struct {

	// Идентификатор категории товара
	CategoryID int `json:"categoryID"`

	// Признак выполнения
	Complete bool `json:"complete"`

	// Идентификатор списка покупок
	ListID int `json:"listID"`

	// Наименование товара
	ProductName string `json:"productName"`

	// Количество товара
	Quantity int `json:"quantity"`
}

// ShoppingItemParamsWithId defines model for shoppingItemParamsWithId.
type ShoppingItemParamsWithId struct {
	// Embedded fields due to inline allOf schema

	// Идентификатор товара
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
	// Embedded fields due to inline allOf schema
}

// ShoppingsByDayErrors defines model for shoppingsByDayErrors.
type ShoppingsByDayErrors struct {
	Validation *ShoppingsByDayValidation `json:"validation,omitempty"`
}

// ShoppingsByDayValidation defines model for shoppingsByDayValidation.
type ShoppingsByDayValidation struct {
	Day   *string `json:"day,omitempty"`
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// User defines model for user.
type User struct {

	// chat_id
	ChatId *int `json:"chat_id,omitempty"`

	// comunity_id
	ComunityId *string `json:"comunity_id,omitempty"`

	// telegram_id
	TelegramId *int `json:"telegram_id,omitempty"`

	// telegram_username
	TelegramUsername *string `json:"telegram_username,omitempty"`

	// token
	Token *string `json:"token,omitempty"`
}

// UserWithID defines model for userWithID.
type UserWithID struct {
	// Embedded fields due to inline allOf schema

	// Идентификатор юзера
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/user)
	User
}

// ComunityId defines model for comunity_id.
type ComunityId string

// Date defines model for date.
type Date string

// Day defines model for day.
type Day int

// Month defines model for month.
type Month int

// ShoppingID defines model for shoppingID.
type ShoppingID int

// TelegramUserId defines model for telegram_user_id.
type TelegramUserId int

// UserId defines model for user_id.
type UserId int

// Year defines model for year.
type Year int

// Base200 defines model for Base_200.
type Base200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
}

// Base400 defines model for Base_400.
type Base400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
}

// Base401 defines model for Base_401.
type Base401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_401)
	Error401
}

// Base404 defines model for Base_404.
type Base404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404)
	Error404
}

// Base405 defines model for Base_405.
type Base405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405)
	Error405
}

// Base500 defines model for Base_500.
type Base500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500)
	Error500
}

// ComingShoppings200 defines model for ComingShoppings_200.
type ComingShoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ComingShoppings400 defines model for ComingShoppings_400.
type ComingShoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema

	// Свойства ошибки валидации
	Errors *ComingShoppingsProperty `json:"errors,omitempty"`
}

// Goods200 defines model for Goods_200.
type Goods200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data []ShoppingItem `json:"data"`
}

// Goods400 defines model for Goods_400.
type Goods400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			ShoppingID *string `json:"shoppingID,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// Item200 defines model for Item_200.
type Item200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItemParamsWithId `json:"data,omitempty"`
}

// Item400 defines model for Item_400.
type Item400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {

			// Идентификатор категории товара
			CategoryID *string `json:"categoryID,omitempty"`

			// Идентификатор списка покупок
			ListID      *string `json:"listID,omitempty"`
			ProductName *string `json:"productName,omitempty"`

			// Количество товара
			Quantity *string `json:"quantity,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// LastShopping200 defines model for LastShopping_200.
type LastShopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ShoppingDays200 defines model for ShoppingDays_200.
type ShoppingDays200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]int `json:"data,omitempty"`
}

// ShoppingDays400 defines model for ShoppingDays_400.
type ShoppingDays400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingDaysErrors `json:"errors,omitempty"`
}

// Shopping200 defines model for Shopping_200.
type Shopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *ShoppingWithId `json:"data,omitempty"`
}

// Shopping400 defines model for Shopping_400.
type Shopping400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingProperty `json:"errors,omitempty"`
}

// Shoppings200 defines model for Shoppings_200.
type Shoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data []ShoppingWithId `json:"data"`
}

// Shoppings400 defines model for Shoppings_400.
type Shoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingsByDayErrors `json:"errors,omitempty"`
}

// Users200 defines model for Users_200.
type Users200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]UserWithID `json:"data,omitempty"`
}

// DeleteItemsRequest defines model for Delete_items_request.
type DeleteItemsRequest DeleteIds

// DeleteShoppingsRequest defines model for Delete_shoppings_request.
type DeleteShoppingsRequest DeleteIds

// ItemRequest defines model for Item_request.
type ItemRequest struct {
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
}

// ShoppingRequest defines model for Shopping_request.
type ShoppingRequest struct {
	// Embedded struct due to allOf(#/components/schemas/Shopping)
	Shopping
}

// UserRequest defines model for User_request.
type UserRequest User

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {

	// telegram user id
	TelegramUserId *TelegramUserId `json:"telegram_user_id,omitempty"`

	// comunity_id
	ComunityId *ComunityId `json:"comunity_id,omitempty"`
}

// UpdateUserParams defines parameters for UpdateUser.
type UpdateUserParams struct {

	// user_id
	UserId UserId `json:"user_id"`
}

// AddItemRequestBody defines body for AddItem for application/json ContentType.
type AddItemJSONRequestBody ItemRequest

// AddShoppingRequestBody defines body for AddShopping for application/json ContentType.
type AddShoppingJSONRequestBody ShoppingRequest

// DeleteItemsRequestBody defines body for DeleteItems for application/json ContentType.
type DeleteItemsJSONRequestBody DeleteItemsRequest

// DeleteShoppingsRequestBody defines body for DeleteShoppings for application/json ContentType.
type DeleteShoppingsJSONRequestBody DeleteShoppingsRequest

// UpdateUserRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UserRequest

// CreateUserRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody UserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Добавление товара в покупку
	// (POST /addItem)
	AddItem(ctx echo.Context) error
	// Добавление покупки
	// (POST /addShopping)
	AddShopping(ctx echo.Context) error
	// Удаление товаров
	// (POST /deleteItems)
	DeleteItems(ctx echo.Context) error
	// Удаление покупок
	// (POST /deleteShoppings)
	DeleteShoppings(ctx echo.Context) error
	// Ближайшие 5 покупок
	// (GET /getComingShoppings/{date})
	GetComingShoppings(ctx echo.Context, date Date) error
	// Список покупок
	// (GET /getGoods/{shoppingID})
	GetGoods(ctx echo.Context, shoppingID ShoppingID) error
	// Даные покупки
	// (GET /getShopping/{shoppingID})
	GetShopping(ctx echo.Context, shoppingID ShoppingID) error
	// Получение списка дней с покупками по месяцу и году
	// (GET /getShoppingDays/{year}/{month})
	GetShoppingDays(ctx echo.Context, year Year, month Month) error
	// Получение списка покупок по конекретному дню
	// (GET /getShoppingsByDay/{year}/{month}/{day})
	GetShoppingsByDay(ctx echo.Context, year Year, month Month, day Day) error
	// Последняя покупка
	// (GET /lastShopping)
	LastShopping(ctx echo.Context) error
	// Получение юзера по telegram user id
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Добавление юзера
	// (PATCH /users)
	UpdateUser(ctx echo.Context, params UpdateUserParams) error
	// Добавление юзера
	// (POST /users)
	CreateUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddItem converts echo context to params.
func (w *ServerInterfaceWrapper) AddItem(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddItem(ctx)
	return err
}

// AddShopping converts echo context to params.
func (w *ServerInterfaceWrapper) AddShopping(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddShopping(ctx)
	return err
}

// DeleteItems converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteItems(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteItems(ctx)
	return err
}

// DeleteShoppings converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteShoppings(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteShoppings(ctx)
	return err
}

// GetComingShoppings converts echo context to params.
func (w *ServerInterfaceWrapper) GetComingShoppings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "date" -------------
	var date Date

	err = runtime.BindStyledParameter("simple", false, "date", ctx.Param("date"), &date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComingShoppings(ctx, date)
	return err
}

// GetGoods converts echo context to params.
func (w *ServerInterfaceWrapper) GetGoods(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shoppingID" -------------
	var shoppingID ShoppingID

	err = runtime.BindStyledParameter("simple", false, "shoppingID", ctx.Param("shoppingID"), &shoppingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shoppingID: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGoods(ctx, shoppingID)
	return err
}

// GetShopping converts echo context to params.
func (w *ServerInterfaceWrapper) GetShopping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shoppingID" -------------
	var shoppingID ShoppingID

	err = runtime.BindStyledParameter("simple", false, "shoppingID", ctx.Param("shoppingID"), &shoppingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shoppingID: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShopping(ctx, shoppingID)
	return err
}

// GetShoppingDays converts echo context to params.
func (w *ServerInterfaceWrapper) GetShoppingDays(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameter("simple", false, "year", ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month Month

	err = runtime.BindStyledParameter("simple", false, "month", ctx.Param("month"), &month)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShoppingDays(ctx, year, month)
	return err
}

// GetShoppingsByDay converts echo context to params.
func (w *ServerInterfaceWrapper) GetShoppingsByDay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameter("simple", false, "year", ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month Month

	err = runtime.BindStyledParameter("simple", false, "month", ctx.Param("month"), &month)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	// ------------- Path parameter "day" -------------
	var day Day

	err = runtime.BindStyledParameter("simple", false, "day", ctx.Param("day"), &day)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter day: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShoppingsByDay(ctx, year, month, day)
	return err
}

// LastShopping converts echo context to params.
func (w *ServerInterfaceWrapper) LastShopping(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LastShopping(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "telegram_user_id" -------------
	if paramValue := ctx.QueryParam("telegram_user_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "telegram_user_id", ctx.QueryParams(), &params.TelegramUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telegram_user_id: %s", err))
	}

	// ------------- Optional query parameter "comunity_id" -------------
	if paramValue := ctx.QueryParam("comunity_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "comunity_id", ctx.QueryParams(), &params.ComunityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter comunity_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateUserParams
	// ------------- Required query parameter "user_id" -------------
	if paramValue := ctx.QueryParam("user_id"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument user_id is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, params)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/addItem", wrapper.AddItem)
	router.POST("/addShopping", wrapper.AddShopping)
	router.POST("/deleteItems", wrapper.DeleteItems)
	router.POST("/deleteShoppings", wrapper.DeleteShoppings)
	router.GET("/getComingShoppings/:date", wrapper.GetComingShoppings)
	router.GET("/getGoods/:shoppingID", wrapper.GetGoods)
	router.GET("/getShopping/:shoppingID", wrapper.GetShopping)
	router.GET("/getShoppingDays/:year/:month", wrapper.GetShoppingDays)
	router.GET("/getShoppingsByDay/:year/:month/:day", wrapper.GetShoppingsByDay)
	router.GET("/lastShopping", wrapper.LastShopping)
	router.GET("/users", wrapper.GetUsers)
	router.PATCH("/users", wrapper.UpdateUser)
	router.POST("/users", wrapper.CreateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

