// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Base defines model for Base.
type Base struct {
	Version *string `json:"version,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// Error400 defines model for Error_400.
type Error400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error404 defines model for Error_404.
type Error404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error405 defines model for Error_405.
type Error405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  *[]interface{} `json:"errors,omitempty"`
	Message *string        `json:"message,omitempty"`
}

// Error500 defines model for Error_500.
type Error500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  interface{} `json:"errors"`
	Message string      `json:"message"`
}

// Shop defines model for Shop.
type Shop struct {
	ID   *int    `json:"ID,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Shopping defines model for Shopping.
type Shopping struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
	// Embedded struct due to allOf(#/components/schemas/Shop)
	Shop
}

// ShoppingItem defines model for Shopping_item.
type ShoppingItem struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/Shopping_item_params_with_id)
	ShoppingItemParamsWithId
}

// ShoppingItemParams defines model for Shopping_item_params.
type ShoppingItemParams struct {
	CategoryID  *int    `json:"categoryID,omitempty"`
	Complete    *bool   `json:"complete,omitempty"`
	ListID      *int    `json:"listID,omitempty"`
	ProductName *string `json:"productName,omitempty"`
	Quantity    *int    `json:"quantity,omitempty"`
}

// ShoppingItemParamsWithId defines model for Shopping_item_params_with_id.
type ShoppingItemParamsWithId struct {
	// Embedded fields due to inline allOf schema
	ID *int `json:"ID,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Shopping_item_params)
	ShoppingItemParams
	// Embedded fields due to inline allOf schema
}

// ShoppingParams defines model for Shopping_params.
type ShoppingParams struct {
	Complete *bool   `json:"complete,omitempty"`
	Date     *string `json:"date,omitempty"`
	OwnerID  *int    `json:"ownerID,omitempty"`
	ShopID   *int    `json:"shopID,omitempty"`
	Sum      *int    `json:"sum,omitempty"`
	Time     *string `json:"time,omitempty"`
}

// ShoppingWithId defines model for Shopping_with_id.
type ShoppingWithId struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	ID *int `json:"ID,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
	// Embedded struct due to allOf(#/components/schemas/Shop)
	Shop
}

// Success defines model for Success.
type Success struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Date defines model for date.
type Date string

// ShoppingID defines model for shoppingID.
type ShoppingID int

// Base404 defines model for Base_404.
type Base404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404)
	Error404
}

// Base405 defines model for Base_405.
type Base405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405)
	Error405
}

// Base500 defines model for Base_500.
type Base500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500)
	Error500
}

// ComingShoppings200 defines model for ComingShoppings_200.
type ComingShoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// Goods200 defines model for Goods_200.
type Goods200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItem `json:"data,omitempty"`
}

// Item200 defines model for Item_200.
type Item200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded struct due to allOf(#/components/schemas/Shopping_item_params_with_id)
	ShoppingItemParamsWithId
}

// Item400 defines model for Item_400.
type Item400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			CategoryID  *int    `json:"categoryID,omitempty"`
			Complete    *bool   `json:"complete,omitempty"`
			ListID      *int    `json:"listID,omitempty"`
			ProductName *string `json:"productName,omitempty"`
			Quantity    *int    `json:"quantity,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// LastShopping200 defines model for LastShopping_200.
type LastShopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded struct due to allOf(#/components/schemas/Shopping_with_id)
	ShoppingWithId
}

// Shopping200 defines model for Shopping_200.
type Shopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/Shopping)
	Shopping
}

// Shopping400 defines model for Shopping_400.
type Shopping400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			Complete *bool   `json:"complete,omitempty"`
			Date     *string `json:"date,omitempty"`
			OwnerID  *int    `json:"ownerID,omitempty"`
			ShopID   *int    `json:"shopID,omitempty"`
			Sum      *int    `json:"sum,omitempty"`
			Time     *string `json:"time,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// ItemRequest defines model for Item_request.
type ItemRequest struct {
	// Embedded struct due to allOf(#/components/schemas/Shopping_item_params)
	ShoppingItemParams
}

// ShoppingRequest defines model for Shopping_request.
type ShoppingRequest struct {
	// Embedded struct due to allOf(#/components/schemas/Shopping)
	Shopping
}

// AddItemRequestBody defines body for AddItem for application/json ContentType.
type AddItemJSONRequestBody ItemRequest

// AddShoppingRequestBody defines body for AddShopping for application/json ContentType.
type AddShoppingJSONRequestBody ShoppingRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Добавление товара в покупку// (POST /addItem)
	AddItem(ctx echo.Context) error
	// Добавление покупки// (POST /addShopping)
	AddShopping(ctx echo.Context) error
	// Ближайшие 5 покупок// (GET /getComingShoppings/{date})
	GetComingShoppings(ctx echo.Context, date Date) error
	// Список покупок// (GET /getGoods/{shoppingID})
	GetGoods(ctx echo.Context, shoppingID ShoppingID) error
	// Последняя покупка// (GET /lastShopping)
	LastShopping(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddItem converts echo context to params.
func (w *ServerInterfaceWrapper) AddItem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddItem(ctx)
	return err
}

// AddShopping converts echo context to params.
func (w *ServerInterfaceWrapper) AddShopping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddShopping(ctx)
	return err
}

// GetComingShoppings converts echo context to params.
func (w *ServerInterfaceWrapper) GetComingShoppings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "date" -------------
	var date Date

	err = runtime.BindStyledParameter("simple", false, "date", ctx.Param("date"), &date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComingShoppings(ctx, date)
	return err
}

// GetGoods converts echo context to params.
func (w *ServerInterfaceWrapper) GetGoods(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shoppingID" -------------
	var shoppingID ShoppingID

	err = runtime.BindStyledParameter("simple", false, "shoppingID", ctx.Param("shoppingID"), &shoppingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shoppingID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGoods(ctx, shoppingID)
	return err
}

// LastShopping converts echo context to params.
func (w *ServerInterfaceWrapper) LastShopping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LastShopping(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/addItem", wrapper.AddItem)
	router.POST("/addShopping", wrapper.AddShopping)
	router.GET("/getComingShoppings/:date", wrapper.GetComingShoppings)
	router.GET("/getGoods/:shoppingID", wrapper.GetGoods)
	router.GET("/lastShopping", wrapper.LastShopping)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/7Q7SqyLKAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

