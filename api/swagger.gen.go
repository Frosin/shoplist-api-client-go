// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Base defines model for Base.
type Base struct {
	Version *string `json:"version,omitempty"`
}

// ComingShoppingsProperty defines model for ComingShoppingsProperty.
type ComingShoppingsProperty struct {
	Validation *ComingShoppingsValidation `json:"validation,omitempty"`
}

// ComingShoppingsValidation defines model for ComingShoppingsValidation.
type ComingShoppingsValidation struct {
	Date *string `json:"date,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// Error400 defines model for Error_400.
type Error400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error401 defines model for Error_401.
type Error401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error404 defines model for Error_404.
type Error404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error405 defines model for Error_405.
type Error405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  *[]interface{} `json:"errors,omitempty"`
	Message *string        `json:"message,omitempty"`
}

// Error500 defines model for Error_500.
type Error500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  interface{} `json:"errors"`
	Message string      `json:"message"`
}

// Shopping defines model for Shopping.
type Shopping struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// ShoppingProperty defines model for ShoppingProperty.
type ShoppingProperty struct {
	Validation *ShoppingValidation `json:"validation,omitempty"`
}

// ShoppingValidation defines model for ShoppingValidation.
type ShoppingValidation struct {
	Date    *string `json:"date,omitempty"`
	Name    *int    `json:"name,omitempty"`
	OwnerID *int    `json:"ownerID,omitempty"`
	Time    *string `json:"time,omitempty"`
}

// ShoppingItem defines model for Shopping_item.
type ShoppingItem struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParamsWithId)
	ShoppingItemParamsWithId
}

// ShoppingParams defines model for Shopping_params.
type ShoppingParams struct {
	Date    string `json:"date"`
	Name    string `json:"name"`
	OwnerID int    `json:"ownerID"`
	Time    string `json:"time"`
}

// ShoppingWithId defines model for Shopping_with_id.
type ShoppingWithId struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// Success defines model for Success.
type Success struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// ShoppingDaysErrors defines model for shoppingDaysErrors.
type ShoppingDaysErrors struct {
	Validation *ShoppingDaysValidation `json:"validation,omitempty"`
}

// ShoppingDaysValidation defines model for shoppingDaysValidation.
type ShoppingDaysValidation struct {
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// ShoppingItemParams defines model for shoppingItemParams.
type ShoppingItemParams struct {
	CategoryID  int    `json:"categoryID"`
	Complete    bool   `json:"complete"`
	ListID      int    `json:"listID"`
	ProductName string `json:"productName"`
	Quantity    int    `json:"quantity"`
}

// ShoppingItemParamsWithId defines model for shoppingItemParamsWithId.
type ShoppingItemParamsWithId struct {
	// Embedded fields due to inline allOf schema
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
	// Embedded fields due to inline allOf schema
}

// ShoppingsByDayErrors defines model for shoppingsByDayErrors.
type ShoppingsByDayErrors struct {
	Validation *ShoppingsByDayValidation `json:"validation,omitempty"`
}

// ShoppingsByDayValidation defines model for shoppingsByDayValidation.
type ShoppingsByDayValidation struct {
	Day   *string `json:"day,omitempty"`
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// Date defines model for date.
type Date string

// Day defines model for day.
type Day int

// Month defines model for month.
type Month int

// ShoppingID defines model for shoppingID.
type ShoppingID int

// Token defines model for token.
type Token string

// Year defines model for year.
type Year int

// Base401 defines model for Base_401.
type Base401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_401)
	Error401
}

// Base404 defines model for Base_404.
type Base404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404)
	Error404
}

// Base405 defines model for Base_405.
type Base405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405)
	Error405
}

// Base500 defines model for Base_500.
type Base500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500)
	Error500
}

// ComingShoppings200 defines model for ComingShoppings_200.
type ComingShoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ComingShoppings400 defines model for ComingShoppings_400.
type ComingShoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ComingShoppingsProperty `json:"errors,omitempty"`
}

// Goods200 defines model for Goods_200.
type Goods200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItem `json:"data,omitempty"`
}

// Goods400 defines model for Goods_400.
type Goods400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			ShoppingID *string `json:"shoppingID,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// Item200 defines model for Item_200.
type Item200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItemParamsWithId `json:"data,omitempty"`
}

// Item400 defines model for Item_400.
type Item400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			CategoryID  *int    `json:"categoryID,omitempty"`
			ListID      *int    `json:"listID,omitempty"`
			ProductName *string `json:"productName,omitempty"`
			Quantity    *int    `json:"quantity,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// LastShopping200 defines model for LastShopping_200.
type LastShopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ShoppingDays200 defines model for ShoppingDays_200.
type ShoppingDays200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]int `json:"data,omitempty"`
}

// ShoppingDays400 defines model for ShoppingDays_400.
type ShoppingDays400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingDaysErrors `json:"errors,omitempty"`
}

// Shopping200 defines model for Shopping_200.
type Shopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// Shopping400 defines model for Shopping_400.
type Shopping400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingProperty `json:"errors,omitempty"`
}

// Shoppings200 defines model for Shoppings_200.
type Shoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// Shoppings400 defines model for Shoppings_400.
type Shoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingsByDayErrors `json:"errors,omitempty"`
}

// ItemRequest defines model for Item_request.
type ItemRequest struct {
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
}

// ShoppingRequest defines model for Shopping_request.
type ShoppingRequest struct {
	// Embedded struct due to allOf(#/components/schemas/Shopping)
	Shopping
}

// AddItemParams defines parameters for AddItem.
type AddItemParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// AddShoppingParams defines parameters for AddShopping.
type AddShoppingParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// GetComingShoppingsParams defines parameters for GetComingShoppings.
type GetComingShoppingsParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// GetGoodsParams defines parameters for GetGoods.
type GetGoodsParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// GetShoppingDaysParams defines parameters for GetShoppingDays.
type GetShoppingDaysParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// GetShoppingsByDayParams defines parameters for GetShoppingsByDay.
type GetShoppingsByDayParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// LastShoppingParams defines parameters for LastShopping.
type LastShoppingParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// AddItemRequestBody defines body for AddItem for application/json ContentType.
type AddItemJSONRequestBody ItemRequest

// AddShoppingRequestBody defines body for AddShopping for application/json ContentType.
type AddShoppingJSONRequestBody ShoppingRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Добавление товара в покупку// (POST /addItem)
	AddItem(ctx echo.Context, params AddItemParams) error
	// Добавление покупки// (POST /addShopping)
	AddShopping(ctx echo.Context, params AddShoppingParams) error
	// Ближайшие 5 покупок// (GET /getComingShoppings/{date})
	GetComingShoppings(ctx echo.Context, date Date, params GetComingShoppingsParams) error
	// Список покупок// (GET /getGoods/{shoppingID})
	GetGoods(ctx echo.Context, shoppingID ShoppingID, params GetGoodsParams) error
	// Получение списка дней с покупками по месяцу и году// (GET /getShoppingDays/{year}/{month})
	GetShoppingDays(ctx echo.Context, year Year, month Month, params GetShoppingDaysParams) error
	// Получение списка покупок по конекретному дню// (GET /getShoppingsByDay/{year}/{month}/{day})
	GetShoppingsByDay(ctx echo.Context, year Year, month Month, day Day, params GetShoppingsByDayParams) error
	// Последняя покупка// (GET /lastShopping)
	LastShopping(ctx echo.Context, params LastShoppingParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddItem converts echo context to params.
func (w *ServerInterfaceWrapper) AddItem(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AddItemParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddItem(ctx, params)
	return err
}

// AddShopping converts echo context to params.
func (w *ServerInterfaceWrapper) AddShopping(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AddShoppingParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddShopping(ctx, params)
	return err
}

// GetComingShoppings converts echo context to params.
func (w *ServerInterfaceWrapper) GetComingShoppings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "date" -------------
	var date Date

	err = runtime.BindStyledParameter("simple", false, "date", ctx.Param("date"), &date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComingShoppingsParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComingShoppings(ctx, date, params)
	return err
}

// GetGoods converts echo context to params.
func (w *ServerInterfaceWrapper) GetGoods(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shoppingID" -------------
	var shoppingID ShoppingID

	err = runtime.BindStyledParameter("simple", false, "shoppingID", ctx.Param("shoppingID"), &shoppingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shoppingID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGoodsParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGoods(ctx, shoppingID, params)
	return err
}

// GetShoppingDays converts echo context to params.
func (w *ServerInterfaceWrapper) GetShoppingDays(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameter("simple", false, "year", ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month Month

	err = runtime.BindStyledParameter("simple", false, "month", ctx.Param("month"), &month)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetShoppingDaysParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShoppingDays(ctx, year, month, params)
	return err
}

// GetShoppingsByDay converts echo context to params.
func (w *ServerInterfaceWrapper) GetShoppingsByDay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameter("simple", false, "year", ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month Month

	err = runtime.BindStyledParameter("simple", false, "month", ctx.Param("month"), &month)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	// ------------- Path parameter "day" -------------
	var day Day

	err = runtime.BindStyledParameter("simple", false, "day", ctx.Param("day"), &day)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter day: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetShoppingsByDayParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShoppingsByDay(ctx, year, month, day, params)
	return err
}

// LastShopping converts echo context to params.
func (w *ServerInterfaceWrapper) LastShopping(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LastShoppingParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LastShopping(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/addItem", wrapper.AddItem)
	router.POST("/addShopping", wrapper.AddShopping)
	router.GET("/getComingShoppings/:date", wrapper.GetComingShoppings)
	router.GET("/getGoods/:shoppingID", wrapper.GetGoods)
	router.GET("/getShoppingDays/:year/:month", wrapper.GetShoppingDays)
	router.GET("/getShoppingsByDay/:year/:month/:day", wrapper.GetShoppingsByDay)
	router.GET("/lastShopping", wrapper.LastShopping)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VLBn7cn/7lES0Moj8cu7HwMAAP//WLrw2QA8AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

