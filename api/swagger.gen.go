// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Base defines model for Base.
type Base struct {

	// Вeрсия ответа сервиса
	Version *string `json:"version,omitempty"`
}

// ComingShoppingsProperty defines model for ComingShoppingsProperty.
type ComingShoppingsProperty struct {
	Validation *ComingShoppingsValidation `json:"validation,omitempty"`
}

// ComingShoppingsValidation defines model for ComingShoppingsValidation.
type ComingShoppingsValidation struct {
	Date *string `json:"date,omitempty"`
}

// DeleteIds defines model for Delete_ids.
type DeleteIds struct {

	// Массив идентификаторв для удаления
	Ids []int `json:"ids"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// Error400 defines model for Error_400.
type Error400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error401 defines model for Error_401.
type Error401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error404 defines model for Error_404.
type Error404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors []interface{} `json:"errors"`

	// сообщение об ошибке
	Message string `json:"message"`
}

// Error405 defines model for Error_405.
type Error405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors *[]interface{} `json:"errors,omitempty"`

	// сообщение ответа
	Message *string `json:"message,omitempty"`
}

// Error500 defines model for Error_500.
type Error500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors interface{} `json:"errors"`

	// сообщение ответа
	Message string `json:"message"`
}

// Shopping defines model for Shopping.
type Shopping struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// ShoppingProperty defines model for ShoppingProperty.
type ShoppingProperty struct {
	Validation *ShoppingValidation `json:"validation,omitempty"`
}

// ShoppingValidation defines model for ShoppingValidation.
type ShoppingValidation struct {
	Date    *string `json:"date,omitempty"`
	Name    *string `json:"name,omitempty"`
	OwnerID *string `json:"ownerID,omitempty"`
	Time    *string `json:"time,omitempty"`
}

// ShoppingItem defines model for Shopping_item.
type ShoppingItem struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParamsWithId)
	ShoppingItemParamsWithId
}

// ShoppingParams defines model for Shopping_params.
type ShoppingParams struct {

	// Дата покупки
	Date string `json:"date"`

	// Наименование магазина
	Name string `json:"name"`

	// Владелец покупки
	OwnerID int `json:"ownerID"`

	// Время совершения покупки
	Time string `json:"time"`
}

// ShoppingWithId defines model for Shopping_with_id.
type ShoppingWithId struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema

	// Идентификатор покупки
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// Success defines model for Success.
type Success struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema

	// Ошибки ответа
	Errors []interface{} `json:"errors"`

	// Сообщение ответа
	Message string `json:"message"`
}

// ShoppingDaysErrors defines model for shoppingDaysErrors.
type ShoppingDaysErrors struct {
	Validation *ShoppingDaysValidation `json:"validation,omitempty"`
}

// ShoppingDaysValidation defines model for shoppingDaysValidation.
type ShoppingDaysValidation struct {
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// ShoppingItemParams defines model for shoppingItemParams.
type ShoppingItemParams struct {

	// Идентификатор категории товара
	CategoryID int `json:"categoryID"`

	// Признак выполнения
	Complete bool `json:"complete"`

	// Идентификатор списка покупок
	ListID int `json:"listID"`

	// Наименование товара
	ProductName string `json:"productName"`

	// Количество товара
	Quantity int `json:"quantity"`
}

// ShoppingItemParamsWithId defines model for shoppingItemParamsWithId.
type ShoppingItemParamsWithId struct {
	// Embedded fields due to inline allOf schema

	// Идентификатор товара
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
	// Embedded fields due to inline allOf schema
}

// ShoppingsByDayErrors defines model for shoppingsByDayErrors.
type ShoppingsByDayErrors struct {
	Validation *ShoppingsByDayValidation `json:"validation,omitempty"`
}

// ShoppingsByDayValidation defines model for shoppingsByDayValidation.
type ShoppingsByDayValidation struct {
	Day   *string `json:"day,omitempty"`
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// User defines model for user.
type User struct {

	// comunity_id
	ComunityId *string `json:"comunity_id,omitempty"`

	// id
	Id *int `json:"id,omitempty"`

	// telegram_id
	TelegramId *int `json:"telegram_id,omitempty"`

	// telegram_username
	TelegramUsername *string `json:"telegram_username,omitempty"`

	// token
	Token *string `json:"token,omitempty"`
}

// ComunityId defines model for comunity_id.
type ComunityId string

// Date defines model for date.
type Date string

// Day defines model for day.
type Day int

// Month defines model for month.
type Month int

// ShoppingID defines model for shoppingID.
type ShoppingID int

// TelegramUserId defines model for telegram_user_id.
type TelegramUserId int

// Year defines model for year.
type Year int

// Base200 defines model for Base_200.
type Base200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
}

// Base400 defines model for Base_400.
type Base400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
}

// Base401 defines model for Base_401.
type Base401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_401)
	Error401
}

// Base404 defines model for Base_404.
type Base404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404)
	Error404
}

// Base405 defines model for Base_405.
type Base405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405)
	Error405
}

// Base500 defines model for Base_500.
type Base500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500)
	Error500
}

// ComingShoppings200 defines model for ComingShoppings_200.
type ComingShoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ComingShoppings400 defines model for ComingShoppings_400.
type ComingShoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema

	// Свойства ошибки валидации
	Errors *ComingShoppingsProperty `json:"errors,omitempty"`
}

// Goods200 defines model for Goods_200.
type Goods200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItem `json:"data,omitempty"`
}

// Goods400 defines model for Goods_400.
type Goods400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			ShoppingID *string `json:"shoppingID,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// Item200 defines model for Item_200.
type Item200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItemParamsWithId `json:"data,omitempty"`
}

// Item400 defines model for Item_400.
type Item400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {

			// Идентификатор категории товара
			CategoryID *string `json:"categoryID,omitempty"`

			// Идентификатор списка покупок
			ListID      *string `json:"listID,omitempty"`
			ProductName *string `json:"productName,omitempty"`

			// Количество товара
			Quantity *string `json:"quantity,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// LastShopping200 defines model for LastShopping_200.
type LastShopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ShoppingDays200 defines model for ShoppingDays_200.
type ShoppingDays200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]int `json:"data,omitempty"`
}

// ShoppingDays400 defines model for ShoppingDays_400.
type ShoppingDays400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingDaysErrors `json:"errors,omitempty"`
}

// Shopping200 defines model for Shopping_200.
type Shopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *ShoppingWithId `json:"data,omitempty"`
}

// Shopping400 defines model for Shopping_400.
type Shopping400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingProperty `json:"errors,omitempty"`
}

// Shoppings200 defines model for Shoppings_200.
type Shoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// Shoppings400 defines model for Shoppings_400.
type Shoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingsByDayErrors `json:"errors,omitempty"`
}

// Users200 defines model for Users_200.
type Users200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]User `json:"data,omitempty"`
}

// DeleteItemsRequest defines model for Delete_items_request.
type DeleteItemsRequest DeleteIds

// DeleteShoppingsRequest defines model for Delete_shoppings_request.
type DeleteShoppingsRequest DeleteIds

// ItemRequest defines model for Item_request.
type ItemRequest struct {
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
}

// ShoppingRequest defines model for Shopping_request.
type ShoppingRequest struct {
	// Embedded struct due to allOf(#/components/schemas/Shopping)
	Shopping
}

// UserRequest defines model for User_request.
type UserRequest User

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {

	// telegram user id
	TelegramUserId *TelegramUserId `json:"telegram_user_id,omitempty"`

	// comunity_id
	ComunityId *ComunityId `json:"comunity_id,omitempty"`
}

// AddItemRequestBody defines body for AddItem for application/json ContentType.
type AddItemJSONRequestBody ItemRequest

// AddShoppingRequestBody defines body for AddShopping for application/json ContentType.
type AddShoppingJSONRequestBody ShoppingRequest

// DeleteItemsRequestBody defines body for DeleteItems for application/json ContentType.
type DeleteItemsJSONRequestBody DeleteItemsRequest

// DeleteShoppingsRequestBody defines body for DeleteShoppings for application/json ContentType.
type DeleteShoppingsJSONRequestBody DeleteShoppingsRequest

// UpdateUserRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UserRequest

// CreateUserRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody UserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Добавление товара в покупку
	// (POST /addItem)
	AddItem(ctx echo.Context) error
	// Добавление покупки
	// (POST /addShopping)
	AddShopping(ctx echo.Context) error
	// Удаление товаров
	// (POST /deleteItems)
	DeleteItems(ctx echo.Context) error
	// Удаление покупок
	// (POST /deleteShoppings)
	DeleteShoppings(ctx echo.Context) error
	// Ближайшие 5 покупок
	// (GET /getComingShoppings/{date})
	GetComingShoppings(ctx echo.Context, date Date) error
	// Список покупок
	// (GET /getGoods/{shoppingID})
	GetGoods(ctx echo.Context, shoppingID ShoppingID) error
	// Даные покупки
	// (GET /getShopping/{shoppingID})
	GetShopping(ctx echo.Context, shoppingID ShoppingID) error
	// Получение списка дней с покупками по месяцу и году
	// (GET /getShoppingDays/{year}/{month})
	GetShoppingDays(ctx echo.Context, year Year, month Month) error
	// Получение списка покупок по конекретному дню
	// (GET /getShoppingsByDay/{year}/{month}/{day})
	GetShoppingsByDay(ctx echo.Context, year Year, month Month, day Day) error
	// Последняя покупка
	// (GET /lastShopping)
	LastShopping(ctx echo.Context) error
	// Получение юзера по telegram user id
	// (GET /users)
	GetUser(ctx echo.Context, params GetUserParams) error
	// Добавление юзера
	// (PATCH /users)
	UpdateUser(ctx echo.Context) error
	// Добавление юзера
	// (POST /users)
	CreateUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddItem converts echo context to params.
func (w *ServerInterfaceWrapper) AddItem(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddItem(ctx)
	return err
}

// AddShopping converts echo context to params.
func (w *ServerInterfaceWrapper) AddShopping(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddShopping(ctx)
	return err
}

// DeleteItems converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteItems(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteItems(ctx)
	return err
}

// DeleteShoppings converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteShoppings(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteShoppings(ctx)
	return err
}

// GetComingShoppings converts echo context to params.
func (w *ServerInterfaceWrapper) GetComingShoppings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "date" -------------
	var date Date

	err = runtime.BindStyledParameter("simple", false, "date", ctx.Param("date"), &date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComingShoppings(ctx, date)
	return err
}

// GetGoods converts echo context to params.
func (w *ServerInterfaceWrapper) GetGoods(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shoppingID" -------------
	var shoppingID ShoppingID

	err = runtime.BindStyledParameter("simple", false, "shoppingID", ctx.Param("shoppingID"), &shoppingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shoppingID: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGoods(ctx, shoppingID)
	return err
}

// GetShopping converts echo context to params.
func (w *ServerInterfaceWrapper) GetShopping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shoppingID" -------------
	var shoppingID ShoppingID

	err = runtime.BindStyledParameter("simple", false, "shoppingID", ctx.Param("shoppingID"), &shoppingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shoppingID: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShopping(ctx, shoppingID)
	return err
}

// GetShoppingDays converts echo context to params.
func (w *ServerInterfaceWrapper) GetShoppingDays(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameter("simple", false, "year", ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month Month

	err = runtime.BindStyledParameter("simple", false, "month", ctx.Param("month"), &month)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShoppingDays(ctx, year, month)
	return err
}

// GetShoppingsByDay converts echo context to params.
func (w *ServerInterfaceWrapper) GetShoppingsByDay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameter("simple", false, "year", ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month Month

	err = runtime.BindStyledParameter("simple", false, "month", ctx.Param("month"), &month)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	// ------------- Path parameter "day" -------------
	var day Day

	err = runtime.BindStyledParameter("simple", false, "day", ctx.Param("day"), &day)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter day: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShoppingsByDay(ctx, year, month, day)
	return err
}

// LastShopping converts echo context to params.
func (w *ServerInterfaceWrapper) LastShopping(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LastShopping(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserParams
	// ------------- Optional query parameter "telegram_user_id" -------------
	if paramValue := ctx.QueryParam("telegram_user_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "telegram_user_id", ctx.QueryParams(), &params.TelegramUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telegram_user_id: %s", err))
	}

	// ------------- Optional query parameter "comunity_id" -------------
	if paramValue := ctx.QueryParam("comunity_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "comunity_id", ctx.QueryParams(), &params.ComunityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter comunity_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, params)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/addItem", wrapper.AddItem)
	router.POST("/addShopping", wrapper.AddShopping)
	router.POST("/deleteItems", wrapper.DeleteItems)
	router.POST("/deleteShoppings", wrapper.DeleteShoppings)
	router.GET("/getComingShoppings/:date", wrapper.GetComingShoppings)
	router.GET("/getGoods/:shoppingID", wrapper.GetGoods)
	router.GET("/getShopping/:shoppingID", wrapper.GetShopping)
	router.GET("/getShoppingDays/:year/:month", wrapper.GetShoppingDays)
	router.GET("/getShoppingsByDay/:year/:month/:day", wrapper.GetShoppingsByDay)
	router.GET("/lastShopping", wrapper.LastShopping)
	router.GET("/users", wrapper.GetUser)
	router.PATCH("/users", wrapper.UpdateUser)
	router.POST("/users", wrapper.CreateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

