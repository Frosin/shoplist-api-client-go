// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Base defines model for Base.
type Base struct {

	// Вeрсия ответа сервиса
	Version *string `json:"version,omitempty"`
}

// ComingShoppingsProperty defines model for ComingShoppingsProperty.
type ComingShoppingsProperty struct {
	Validation *ComingShoppingsValidation `json:"validation,omitempty"`
}

// ComingShoppingsValidation defines model for ComingShoppingsValidation.
type ComingShoppingsValidation struct {
	Date *string `json:"date,omitempty"`
}

// DeleteIds defines model for Delete_ids.
type DeleteIds struct {

	// Массив идентификаторв для удаления
	Ids []int `json:"ids"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// Error400 defines model for Error_400.
type Error400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error401 defines model for Error_401.
type Error401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error404 defines model for Error_404.
type Error404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors []interface{} `json:"errors"`

	// сообщение об ошибке
	Message string `json:"message"`
}

// Error405 defines model for Error_405.
type Error405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors *[]interface{} `json:"errors,omitempty"`

	// сообщение ответа
	Message *string `json:"message,omitempty"`
}

// Error500 defines model for Error_500.
type Error500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors interface{} `json:"errors"`

	// сообщение ответа
	Message string `json:"message"`
}

// Shopping defines model for Shopping.
type Shopping struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// ShoppingProperty defines model for ShoppingProperty.
type ShoppingProperty struct {
	Validation *ShoppingValidation `json:"validation,omitempty"`
}

// ShoppingValidation defines model for ShoppingValidation.
type ShoppingValidation struct {
	Date    *string `json:"date,omitempty"`
	Name    *string `json:"name,omitempty"`
	OwnerID *string `json:"ownerID,omitempty"`
	Time    *string `json:"time,omitempty"`
}

// ShoppingItem defines model for Shopping_item.
type ShoppingItem struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParamsWithId)
	ShoppingItemParamsWithId
}

// ShoppingParams defines model for Shopping_params.
type ShoppingParams struct {

	// Дата покупки
	Date string `json:"date"`

	// Наименование магазина
	Name string `json:"name"`

	// Владелец покупки
	OwnerID int `json:"ownerID"`

	// Время совершения покупки
	Time string `json:"time"`
}

// ShoppingWithId defines model for Shopping_with_id.
type ShoppingWithId struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema

	// Идентификатор покупки
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// Success defines model for Success.
type Success struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema

	// Ошибки ответа
	Errors []interface{} `json:"errors"`

	// Сообщение ответа
	Message string `json:"message"`
}

// ShoppingDaysErrors defines model for shoppingDaysErrors.
type ShoppingDaysErrors struct {
	Validation *ShoppingDaysValidation `json:"validation,omitempty"`
}

// ShoppingDaysValidation defines model for shoppingDaysValidation.
type ShoppingDaysValidation struct {
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// ShoppingItemParams defines model for shoppingItemParams.
type ShoppingItemParams struct {

	// Идентификатор категории товара
	CategoryID int `json:"categoryID"`

	// Признак выполнения
	Complete bool `json:"complete"`

	// Идентификатор списка покупок
	ListID int `json:"listID"`

	// Наименование товара
	ProductName string `json:"productName"`

	// Количество товара
	Quantity int `json:"quantity"`
}

// ShoppingItemParamsWithId defines model for shoppingItemParamsWithId.
type ShoppingItemParamsWithId struct {
	// Embedded fields due to inline allOf schema

	// Идентификатор товара
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
	// Embedded fields due to inline allOf schema
}

// ShoppingsByDayErrors defines model for shoppingsByDayErrors.
type ShoppingsByDayErrors struct {
	Validation *ShoppingsByDayValidation `json:"validation,omitempty"`
}

// ShoppingsByDayValidation defines model for shoppingsByDayValidation.
type ShoppingsByDayValidation struct {
	Day   *string `json:"day,omitempty"`
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// User defines model for user.
type User struct {

	// chat_id
	ChatId *int `json:"chat_id,omitempty"`

	// comunity_id
	ComunityId *string `json:"comunity_id,omitempty"`

	// telegram_id
	TelegramId *int `json:"telegram_id,omitempty"`

	// telegram_username
	TelegramUsername *string `json:"telegram_username,omitempty"`

	// token
	Token *string `json:"token,omitempty"`
}

// UserWithID defines model for userWithID.
type UserWithID struct {
	// Embedded fields due to inline allOf schema

	// Идентификатор юзера
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/user)
	User
}

// ComunityId defines model for comunity_id.
type ComunityId string

// Date defines model for date.
type Date string

// Day defines model for day.
type Day int

// Month defines model for month.
type Month int

// ShoppingID defines model for shoppingID.
type ShoppingID int

// TelegramUserId defines model for telegram_user_id.
type TelegramUserId int

// UserId defines model for user_id.
type UserId int

// Year defines model for year.
type Year int

// Base200 defines model for Base_200.
type Base200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
}

// Base400 defines model for Base_400.
type Base400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
}

// Base401 defines model for Base_401.
type Base401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_401)
	Error401
}

// Base404 defines model for Base_404.
type Base404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404)
	Error404
}

// Base405 defines model for Base_405.
type Base405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405)
	Error405
}

// Base500 defines model for Base_500.
type Base500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500)
	Error500
}

// ComingShoppings200 defines model for ComingShoppings_200.
type ComingShoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ComingShoppings400 defines model for ComingShoppings_400.
type ComingShoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema

	// Свойства ошибки валидации
	Errors *ComingShoppingsProperty `json:"errors,omitempty"`
}

// Goods200 defines model for Goods_200.
type Goods200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItem `json:"data,omitempty"`
}

// Goods400 defines model for Goods_400.
type Goods400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			ShoppingID *string `json:"shoppingID,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// Item200 defines model for Item_200.
type Item200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItemParamsWithId `json:"data,omitempty"`
}

// Item400 defines model for Item_400.
type Item400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {

			// Идентификатор категории товара
			CategoryID *string `json:"categoryID,omitempty"`

			// Идентификатор списка покупок
			ListID      *string `json:"listID,omitempty"`
			ProductName *string `json:"productName,omitempty"`

			// Количество товара
			Quantity *string `json:"quantity,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// LastShopping200 defines model for LastShopping_200.
type LastShopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ShoppingDays200 defines model for ShoppingDays_200.
type ShoppingDays200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]int `json:"data,omitempty"`
}

// ShoppingDays400 defines model for ShoppingDays_400.
type ShoppingDays400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingDaysErrors `json:"errors,omitempty"`
}

// Shopping200 defines model for Shopping_200.
type Shopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *ShoppingWithId `json:"data,omitempty"`
}

// Shopping400 defines model for Shopping_400.
type Shopping400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingProperty `json:"errors,omitempty"`
}

// Shoppings200 defines model for Shoppings_200.
type Shoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data []ShoppingWithId `json:"data"`
}

// Shoppings400 defines model for Shoppings_400.
type Shoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingsByDayErrors `json:"errors,omitempty"`
}

// Users200 defines model for Users_200.
type Users200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]UserWithID `json:"data,omitempty"`
}

// DeleteItemsRequest defines model for Delete_items_request.
type DeleteItemsRequest DeleteIds

// DeleteShoppingsRequest defines model for Delete_shoppings_request.
type DeleteShoppingsRequest DeleteIds

// ItemRequest defines model for Item_request.
type ItemRequest struct {
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
}

// ShoppingRequest defines model for Shopping_request.
type ShoppingRequest struct {
	// Embedded struct due to allOf(#/components/schemas/Shopping)
	Shopping
}

// UserRequest defines model for User_request.
type UserRequest User

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {

	// telegram user id
	TelegramUserId *TelegramUserId `json:"telegram_user_id,omitempty"`

	// comunity_id
	ComunityId *ComunityId `json:"comunity_id,omitempty"`
}

// UpdateUserParams defines parameters for UpdateUser.
type UpdateUserParams struct {

	// user_id
	UserId UserId `json:"user_id"`
}

// AddItemRequestBody defines body for AddItem for application/json ContentType.
type AddItemJSONRequestBody ItemRequest

// AddShoppingRequestBody defines body for AddShopping for application/json ContentType.
type AddShoppingJSONRequestBody ShoppingRequest

// DeleteItemsRequestBody defines body for DeleteItems for application/json ContentType.
type DeleteItemsJSONRequestBody DeleteItemsRequest

// DeleteShoppingsRequestBody defines body for DeleteShoppings for application/json ContentType.
type DeleteShoppingsJSONRequestBody DeleteShoppingsRequest

// UpdateUserRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UserRequest

// CreateUserRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody UserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Добавление товара в покупку
	// (POST /addItem)
	AddItem(ctx echo.Context) error
	// Добавление покупки
	// (POST /addShopping)
	AddShopping(ctx echo.Context) error
	// Удаление товаров
	// (POST /deleteItems)
	DeleteItems(ctx echo.Context) error
	// Удаление покупок
	// (POST /deleteShoppings)
	DeleteShoppings(ctx echo.Context) error
	// Ближайшие 5 покупок
	// (GET /getComingShoppings/{date})
	GetComingShoppings(ctx echo.Context, date Date) error
	// Список покупок
	// (GET /getGoods/{shoppingID})
	GetGoods(ctx echo.Context, shoppingID ShoppingID) error
	// Даные покупки
	// (GET /getShopping/{shoppingID})
	GetShopping(ctx echo.Context, shoppingID ShoppingID) error
	// Получение списка дней с покупками по месяцу и году
	// (GET /getShoppingDays/{year}/{month})
	GetShoppingDays(ctx echo.Context, year Year, month Month) error
	// Получение списка покупок по конекретному дню
	// (GET /getShoppingsByDay/{year}/{month}/{day})
	GetShoppingsByDay(ctx echo.Context, year Year, month Month, day Day) error
	// Последняя покупка
	// (GET /lastShopping)
	LastShopping(ctx echo.Context) error
	// Получение юзера по telegram user id
	// (GET /users)
	GetUsers(ctx echo.Context, params GetUsersParams) error
	// Добавление юзера
	// (PATCH /users)
	UpdateUser(ctx echo.Context, params UpdateUserParams) error
	// Добавление юзера
	// (POST /users)
	CreateUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddItem converts echo context to params.
func (w *ServerInterfaceWrapper) AddItem(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddItem(ctx)
	return err
}

// AddShopping converts echo context to params.
func (w *ServerInterfaceWrapper) AddShopping(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddShopping(ctx)
	return err
}

// DeleteItems converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteItems(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteItems(ctx)
	return err
}

// DeleteShoppings converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteShoppings(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteShoppings(ctx)
	return err
}

// GetComingShoppings converts echo context to params.
func (w *ServerInterfaceWrapper) GetComingShoppings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "date" -------------
	var date Date

	err = runtime.BindStyledParameter("simple", false, "date", ctx.Param("date"), &date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComingShoppings(ctx, date)
	return err
}

// GetGoods converts echo context to params.
func (w *ServerInterfaceWrapper) GetGoods(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shoppingID" -------------
	var shoppingID ShoppingID

	err = runtime.BindStyledParameter("simple", false, "shoppingID", ctx.Param("shoppingID"), &shoppingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shoppingID: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGoods(ctx, shoppingID)
	return err
}

// GetShopping converts echo context to params.
func (w *ServerInterfaceWrapper) GetShopping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shoppingID" -------------
	var shoppingID ShoppingID

	err = runtime.BindStyledParameter("simple", false, "shoppingID", ctx.Param("shoppingID"), &shoppingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shoppingID: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShopping(ctx, shoppingID)
	return err
}

// GetShoppingDays converts echo context to params.
func (w *ServerInterfaceWrapper) GetShoppingDays(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameter("simple", false, "year", ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month Month

	err = runtime.BindStyledParameter("simple", false, "month", ctx.Param("month"), &month)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShoppingDays(ctx, year, month)
	return err
}

// GetShoppingsByDay converts echo context to params.
func (w *ServerInterfaceWrapper) GetShoppingsByDay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameter("simple", false, "year", ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month Month

	err = runtime.BindStyledParameter("simple", false, "month", ctx.Param("month"), &month)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	// ------------- Path parameter "day" -------------
	var day Day

	err = runtime.BindStyledParameter("simple", false, "day", ctx.Param("day"), &day)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter day: %s", err))
	}

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShoppingsByDay(ctx, year, month, day)
	return err
}

// LastShopping converts echo context to params.
func (w *ServerInterfaceWrapper) LastShopping(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LastShopping(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams
	// ------------- Optional query parameter "telegram_user_id" -------------
	if paramValue := ctx.QueryParam("telegram_user_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "telegram_user_id", ctx.QueryParams(), &params.TelegramUserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telegram_user_id: %s", err))
	}

	// ------------- Optional query parameter "comunity_id" -------------
	if paramValue := ctx.QueryParam("comunity_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "comunity_id", ctx.QueryParams(), &params.ComunityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter comunity_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx, params)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateUserParams
	// ------------- Required query parameter "user_id" -------------
	if paramValue := ctx.QueryParam("user_id"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument user_id is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUser(ctx, params)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set("token.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/addItem", wrapper.AddItem)
	router.POST("/addShopping", wrapper.AddShopping)
	router.POST("/deleteItems", wrapper.DeleteItems)
	router.POST("/deleteShoppings", wrapper.DeleteShoppings)
	router.GET("/getComingShoppings/:date", wrapper.GetComingShoppings)
	router.GET("/getGoods/:shoppingID", wrapper.GetGoods)
	router.GET("/getShopping/:shoppingID", wrapper.GetShopping)
	router.GET("/getShoppingDays/:year/:month", wrapper.GetShoppingDays)
	router.GET("/getShoppingsByDay/:year/:month/:day", wrapper.GetShoppingsByDay)
	router.GET("/lastShopping", wrapper.LastShopping)
	router.GET("/users", wrapper.GetUsers)
	router.PATCH("/users", wrapper.UpdateUser)
	router.POST("/users", wrapper.CreateUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

