// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Base defines model for Base.
type Base struct {

	// Вeрсия ответа сервиса
	Version *string `json:"version,omitempty"`
}

// ComingShoppingsProperty defines model for ComingShoppingsProperty.
type ComingShoppingsProperty struct {
	Validation *ComingShoppingsValidation `json:"validation,omitempty"`
}

// ComingShoppingsValidation defines model for ComingShoppingsValidation.
type ComingShoppingsValidation struct {
	Date *string `json:"date,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// Error400 defines model for Error_400.
type Error400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error401 defines model for Error_401.
type Error401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error404 defines model for Error_404.
type Error404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors []interface{} `json:"errors"`

	// сообщение об ошибке
	Message string `json:"message"`
}

// Error405 defines model for Error_405.
type Error405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors *[]interface{} `json:"errors,omitempty"`

	// сообщение ответа
	Message *string `json:"message,omitempty"`
}

// Error500 defines model for Error_500.
type Error500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors interface{} `json:"errors"`

	// сообщение ответа
	Message string `json:"message"`
}

// Shopping defines model for Shopping.
type Shopping struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// ShoppingProperty defines model for ShoppingProperty.
type ShoppingProperty struct {
	Validation *ShoppingValidation `json:"validation,omitempty"`
}

// ShoppingValidation defines model for ShoppingValidation.
type ShoppingValidation struct {
	Date    *string `json:"date,omitempty"`
	Name    *int    `json:"name,omitempty"`
	OwnerID *int    `json:"ownerID,omitempty"`
	Time    *string `json:"time,omitempty"`
}

// ShoppingItem defines model for Shopping_item.
type ShoppingItem struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParamsWithId)
	ShoppingItemParamsWithId
}

// ShoppingParams defines model for Shopping_params.
type ShoppingParams struct {

	// Дата покупки
	Date string `json:"date"`

	// Наименование магазина
	Name string `json:"name"`

	// Владелец покупки
	OwnerID int `json:"ownerID"`

	// Время совершения покупки
	Time string `json:"time"`
}

// ShoppingWithId defines model for Shopping_with_id.
type ShoppingWithId struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema

	// Идентификатор покупки
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// Success defines model for Success.
type Success struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema

	// Ошибки ответа
	Errors []interface{} `json:"errors"`

	// Сообщение ответа
	Message string `json:"message"`
}

// ShoppingDaysErrors defines model for shoppingDaysErrors.
type ShoppingDaysErrors struct {
	Validation *ShoppingDaysValidation `json:"validation,omitempty"`
}

// ShoppingDaysValidation defines model for shoppingDaysValidation.
type ShoppingDaysValidation struct {
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// ShoppingItemParams defines model for shoppingItemParams.
type ShoppingItemParams struct {

	// Идентификатор категории товара
	CategoryID int `json:"categoryID"`

	// Признак выполнения
	Complete bool `json:"complete"`

	// Идентификатор списка покупок
	ListID int `json:"listID"`

	// Наименование товара
	ProductName string `json:"productName"`

	// Количество товара
	Quantity int `json:"quantity"`
}

// ShoppingItemParamsWithId defines model for shoppingItemParamsWithId.
type ShoppingItemParamsWithId struct {
	// Embedded fields due to inline allOf schema

	// Идентификатор товара
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
	// Embedded fields due to inline allOf schema
}

// ShoppingsByDayErrors defines model for shoppingsByDayErrors.
type ShoppingsByDayErrors struct {
	Validation *ShoppingsByDayValidation `json:"validation,omitempty"`
}

// ShoppingsByDayValidation defines model for shoppingsByDayValidation.
type ShoppingsByDayValidation struct {
	Day   *string `json:"day,omitempty"`
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// Date defines model for date.
type Date string

// Day defines model for day.
type Day int

// Month defines model for month.
type Month int

// ShoppingID defines model for shoppingID.
type ShoppingID int

// Token defines model for token.
type Token string

// Year defines model for year.
type Year int

// Base401 defines model for Base_401.
type Base401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_401)
	Error401
}

// Base404 defines model for Base_404.
type Base404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404)
	Error404
}

// Base405 defines model for Base_405.
type Base405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405)
	Error405
}

// Base500 defines model for Base_500.
type Base500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500)
	Error500
}

// ComingShoppings200 defines model for ComingShoppings_200.
type ComingShoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ComingShoppings400 defines model for ComingShoppings_400.
type ComingShoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema

	// Свойства ошибки валидации
	Errors *ComingShoppingsProperty `json:"errors,omitempty"`
}

// Goods200 defines model for Goods_200.
type Goods200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItem `json:"data,omitempty"`
}

// Goods400 defines model for Goods_400.
type Goods400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			ShoppingID *string `json:"shoppingID,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// Item200 defines model for Item_200.
type Item200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItemParamsWithId `json:"data,omitempty"`
}

// Item400 defines model for Item_400.
type Item400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {

			// Идентификатор категории товара
			CategoryID *int `json:"categoryID,omitempty"`

			// Идентификатор списка покупок
			ListID      *int    `json:"listID,omitempty"`
			ProductName *string `json:"productName,omitempty"`

			// Количество товара
			Quantity *int `json:"quantity,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// LastShopping200 defines model for LastShopping_200.
type LastShopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ShoppingDays200 defines model for ShoppingDays_200.
type ShoppingDays200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]int `json:"data,omitempty"`
}

// ShoppingDays400 defines model for ShoppingDays_400.
type ShoppingDays400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingDaysErrors `json:"errors,omitempty"`
}

// Shopping200 defines model for Shopping_200.
type Shopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *ShoppingWithId `json:"data,omitempty"`
}

// Shopping400 defines model for Shopping_400.
type Shopping400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingProperty `json:"errors,omitempty"`
}

// Shoppings200 defines model for Shoppings_200.
type Shoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// Shoppings400 defines model for Shoppings_400.
type Shoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingsByDayErrors `json:"errors,omitempty"`
}

// ItemRequest defines model for Item_request.
type ItemRequest struct {
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
}

// ShoppingRequest defines model for Shopping_request.
type ShoppingRequest struct {
	// Embedded struct due to allOf(#/components/schemas/Shopping)
	Shopping
}

// AddItemParams defines parameters for AddItem.
type AddItemParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// AddShoppingParams defines parameters for AddShopping.
type AddShoppingParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// GetComingShoppingsParams defines parameters for GetComingShoppings.
type GetComingShoppingsParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// GetGoodsParams defines parameters for GetGoods.
type GetGoodsParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// GetShoppingParams defines parameters for GetShopping.
type GetShoppingParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// GetShoppingDaysParams defines parameters for GetShoppingDays.
type GetShoppingDaysParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// GetShoppingsByDayParams defines parameters for GetShoppingsByDay.
type GetShoppingsByDayParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// LastShoppingParams defines parameters for LastShopping.
type LastShoppingParams struct {

	// Токен доступа
	Token Token `json:"token"`
}

// AddItemRequestBody defines body for AddItem for application/json ContentType.
type AddItemJSONRequestBody ItemRequest

// AddShoppingRequestBody defines body for AddShopping for application/json ContentType.
type AddShoppingJSONRequestBody ShoppingRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Добавление товара в покупку
	// (POST /addItem)
	AddItem(ctx echo.Context, params AddItemParams) error
	// Добавление покупки
	// (POST /addShopping)
	AddShopping(ctx echo.Context, params AddShoppingParams) error
	// Ближайшие 5 покупок
	// (GET /getComingShoppings/{date})
	GetComingShoppings(ctx echo.Context, date Date, params GetComingShoppingsParams) error
	// Список покупок
	// (GET /getGoods/{shoppingID})
	GetGoods(ctx echo.Context, shoppingID ShoppingID, params GetGoodsParams) error
	// Даные покупки
	// (GET /getShopping/{shoppingID})
	GetShopping(ctx echo.Context, shoppingID ShoppingID, params GetShoppingParams) error
	// Получение списка дней с покупками по месяцу и году
	// (GET /getShoppingDays/{year}/{month})
	GetShoppingDays(ctx echo.Context, year Year, month Month, params GetShoppingDaysParams) error
	// Получение списка покупок по конекретному дню
	// (GET /getShoppingsByDay/{year}/{month}/{day})
	GetShoppingsByDay(ctx echo.Context, year Year, month Month, day Day, params GetShoppingsByDayParams) error
	// Последняя покупка
	// (GET /lastShopping)
	LastShopping(ctx echo.Context, params LastShoppingParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddItem converts echo context to params.
func (w *ServerInterfaceWrapper) AddItem(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AddItemParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddItem(ctx, params)
	return err
}

// AddShopping converts echo context to params.
func (w *ServerInterfaceWrapper) AddShopping(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AddShoppingParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddShopping(ctx, params)
	return err
}

// GetComingShoppings converts echo context to params.
func (w *ServerInterfaceWrapper) GetComingShoppings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "date" -------------
	var date Date

	err = runtime.BindStyledParameter("simple", false, "date", ctx.Param("date"), &date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComingShoppingsParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComingShoppings(ctx, date, params)
	return err
}

// GetGoods converts echo context to params.
func (w *ServerInterfaceWrapper) GetGoods(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shoppingID" -------------
	var shoppingID ShoppingID

	err = runtime.BindStyledParameter("simple", false, "shoppingID", ctx.Param("shoppingID"), &shoppingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shoppingID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGoodsParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGoods(ctx, shoppingID, params)
	return err
}

// GetShopping converts echo context to params.
func (w *ServerInterfaceWrapper) GetShopping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shoppingID" -------------
	var shoppingID ShoppingID

	err = runtime.BindStyledParameter("simple", false, "shoppingID", ctx.Param("shoppingID"), &shoppingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shoppingID: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetShoppingParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShopping(ctx, shoppingID, params)
	return err
}

// GetShoppingDays converts echo context to params.
func (w *ServerInterfaceWrapper) GetShoppingDays(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameter("simple", false, "year", ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month Month

	err = runtime.BindStyledParameter("simple", false, "month", ctx.Param("month"), &month)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetShoppingDaysParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShoppingDays(ctx, year, month, params)
	return err
}

// GetShoppingsByDay converts echo context to params.
func (w *ServerInterfaceWrapper) GetShoppingsByDay(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year Year

	err = runtime.BindStyledParameter("simple", false, "year", ctx.Param("year"), &year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "month" -------------
	var month Month

	err = runtime.BindStyledParameter("simple", false, "month", ctx.Param("month"), &month)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter month: %s", err))
	}

	// ------------- Path parameter "day" -------------
	var day Day

	err = runtime.BindStyledParameter("simple", false, "day", ctx.Param("day"), &day)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter day: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetShoppingsByDayParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShoppingsByDay(ctx, year, month, day, params)
	return err
}

// LastShopping converts echo context to params.
func (w *ServerInterfaceWrapper) LastShopping(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LastShoppingParams
	// ------------- Required query parameter "token" -------------
	if paramValue := ctx.QueryParam("token"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument token is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LastShopping(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/addItem", wrapper.AddItem)
	router.POST("/addShopping", wrapper.AddShopping)
	router.GET("/getComingShoppings/:date", wrapper.GetComingShoppings)
	router.GET("/getGoods/:shoppingID", wrapper.GetGoods)
	router.GET("/getShopping/:shoppingID", wrapper.GetShopping)
	router.GET("/getShoppingDays/:year/:month", wrapper.GetShoppingDays)
	router.GET("/getShoppingsByDay/:year/:month/:day", wrapper.GetShoppingsByDay)
	router.GET("/lastShopping", wrapper.LastShopping)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

