// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// Base defines model for Base.
type Base struct {
	Version *string `json:"version,omitempty"`
}

// ComingShoppingsProperty defines model for ComingShoppingsProperty.
type ComingShoppingsProperty struct {
	Validation *ComingShoppingsValidation `json:"validation,omitempty"`
}

// ComingShoppingsValidation defines model for ComingShoppingsValidation.
type ComingShoppingsValidation struct {
	Date *string `json:"date,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// Error400 defines model for Error_400.
type Error400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error404 defines model for Error_404.
type Error404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error405 defines model for Error_405.
type Error405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  *[]interface{} `json:"errors,omitempty"`
	Message *string        `json:"message,omitempty"`
}

// Error500 defines model for Error_500.
type Error500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  interface{} `json:"errors"`
	Message string      `json:"message"`
}

// Shopping defines model for Shopping.
type Shopping struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// ShoppingProperty defines model for ShoppingProperty.
type ShoppingProperty struct {
	Validation *ShoppingValidation `json:"validation,omitempty"`
}

// ShoppingValidation defines model for ShoppingValidation.
type ShoppingValidation struct {
	Date    *string `json:"date,omitempty"`
	Name    *int    `json:"name,omitempty"`
	OwnerID *int    `json:"ownerID,omitempty"`
	Time    *string `json:"time,omitempty"`
}

// ShoppingItem defines model for Shopping_item.
type ShoppingItem struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/Shopping_item_params_with_id)
	ShoppingItemParamsWithId
}

// ShoppingItemParams defines model for Shopping_item_params.
type ShoppingItemParams struct {
	CategoryID  int    `json:"categoryID"`
	Complete    bool   `json:"complete"`
	ListID      int    `json:"listID"`
	ProductName string `json:"productName"`
	Quantity    int    `json:"quantity"`
}

// ShoppingItemParamsWithId defines model for Shopping_item_params_with_id.
type ShoppingItemParamsWithId struct {
	// Embedded fields due to inline allOf schema
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Shopping_item_params)
	ShoppingItemParams
	// Embedded fields due to inline allOf schema
}

// ShoppingParams defines model for Shopping_params.
type ShoppingParams struct {
	Date    string `json:"date"`
	Name    string `json:"name"`
	OwnerID int    `json:"ownerID"`
	Time    string `json:"time"`
}

// ShoppingWithId defines model for Shopping_with_id.
type ShoppingWithId struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// Success defines model for Success.
type Success struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Date defines model for date.
type Date string

// ShoppingID defines model for shoppingID.
type ShoppingID int

// Base404 defines model for Base_404.
type Base404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404)
	Error404
}

// Base405 defines model for Base_405.
type Base405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405)
	Error405
}

// Base500 defines model for Base_500.
type Base500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500)
	Error500
}

// ComingShoppings200 defines model for ComingShoppings_200.
type ComingShoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ComingShoppings400 defines model for ComingShoppings_400.
type ComingShoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ComingShoppingsProperty `json:"errors,omitempty"`
}

// Goods200 defines model for Goods_200.
type Goods200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItem `json:"data,omitempty"`
}

// Goods400 defines model for Goods_400.
type Goods400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			ShoppingID *string `json:"shoppingID,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// Item200 defines model for Item_200.
type Item200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItemParamsWithId `json:"data,omitempty"`
}

// Item400 defines model for Item_400.
type Item400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			CategoryID  *int    `json:"categoryID,omitempty"`
			ListID      *int    `json:"listID,omitempty"`
			ProductName *string `json:"productName,omitempty"`
			Quantity    *int    `json:"quantity,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// LastShopping200 defines model for LastShopping_200.
type LastShopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// Shopping200 defines model for Shopping_200.
type Shopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// Shopping400 defines model for Shopping_400.
type Shopping400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingProperty `json:"errors,omitempty"`
}

// ItemRequest defines model for Item_request.
type ItemRequest struct {
	// Embedded struct due to allOf(#/components/schemas/Shopping_item_params)
	ShoppingItemParams
}

// ShoppingRequest defines model for Shopping_request.
type ShoppingRequest struct {
	// Embedded struct due to allOf(#/components/schemas/Shopping)
	Shopping
}

// AddItemRequestBody defines body for AddItem for application/json ContentType.
type AddItemJSONRequestBody ItemRequest

// AddShoppingRequestBody defines body for AddShopping for application/json ContentType.
type AddShoppingJSONRequestBody ShoppingRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Добавление товара в покупку// (POST /addItem)
	AddItem(ctx echo.Context) error
	// Добавление покупки// (POST /addShopping)
	AddShopping(ctx echo.Context) error
	// Ближайшие 5 покупок// (GET /getComingShoppings/{date})
	GetComingShoppings(ctx echo.Context, date Date) error
	// Список покупок// (GET /getGoods/{shoppingID})
	GetGoods(ctx echo.Context, shoppingID ShoppingID) error
	// Последняя покупка// (GET /lastShopping)
	LastShopping(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddItem converts echo context to params.
func (w *ServerInterfaceWrapper) AddItem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddItem(ctx)
	return err
}

// AddShopping converts echo context to params.
func (w *ServerInterfaceWrapper) AddShopping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddShopping(ctx)
	return err
}

// GetComingShoppings converts echo context to params.
func (w *ServerInterfaceWrapper) GetComingShoppings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "date" -------------
	var date Date

	err = runtime.BindStyledParameter("simple", false, "date", ctx.Param("date"), &date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComingShoppings(ctx, date)
	return err
}

// GetGoods converts echo context to params.
func (w *ServerInterfaceWrapper) GetGoods(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shoppingID" -------------
	var shoppingID ShoppingID

	err = runtime.BindStyledParameter("simple", false, "shoppingID", ctx.Param("shoppingID"), &shoppingID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shoppingID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGoods(ctx, shoppingID)
	return err
}

// LastShopping converts echo context to params.
func (w *ServerInterfaceWrapper) LastShopping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LastShopping(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/addItem", wrapper.AddItem)
	router.POST("/addShopping", wrapper.AddShopping)
	router.GET("/getComingShoppings/:date", wrapper.GetComingShoppings)
	router.GET("/getGoods/:shoppingID", wrapper.GetGoods)
	router.GET("/lastShopping", wrapper.LastShopping)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

