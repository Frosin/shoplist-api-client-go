// Package client provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Base defines model for Base.
type Base struct {

	// Вeрсия ответа сервиса
	Version *string `json:"version,omitempty"`
}

// ComingShoppingsProperty defines model for ComingShoppingsProperty.
type ComingShoppingsProperty struct {
	Validation *ComingShoppingsValidation `json:"validation,omitempty"`
}

// ComingShoppingsValidation defines model for ComingShoppingsValidation.
type ComingShoppingsValidation struct {
	Date *string `json:"date,omitempty"`
}

// DeleteIds defines model for Delete_ids.
type DeleteIds struct {

	// Массив идентификаторв для удаления
	Ids []int `json:"ids"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// Error400 defines model for Error_400.
type Error400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error401 defines model for Error_401.
type Error401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error404 defines model for Error_404.
type Error404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors []interface{} `json:"errors"`

	// сообщение об ошибке
	Message string `json:"message"`
}

// Error405 defines model for Error_405.
type Error405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors *[]interface{} `json:"errors,omitempty"`

	// сообщение ответа
	Message *string `json:"message,omitempty"`
}

// Error500 defines model for Error_500.
type Error500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors interface{} `json:"errors"`

	// сообщение ответа
	Message string `json:"message"`
}

// Shopping defines model for Shopping.
type Shopping struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// ShoppingProperty defines model for ShoppingProperty.
type ShoppingProperty struct {
	Validation *ShoppingValidation `json:"validation,omitempty"`
}

// ShoppingValidation defines model for ShoppingValidation.
type ShoppingValidation struct {
	Date    *string `json:"date,omitempty"`
	Name    *string `json:"name,omitempty"`
	OwnerID *string `json:"ownerID,omitempty"`
	Time    *string `json:"time,omitempty"`
}

// ShoppingItem defines model for Shopping_item.
type ShoppingItem struct {
	// Embedded fields due to inline allOf schema
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParamsWithId)
	ShoppingItemParamsWithId
}

// ShoppingParams defines model for Shopping_params.
type ShoppingParams struct {

	// Дата покупки
	Date string `json:"date"`

	// Наименование магазина
	Name string `json:"name"`

	// Владелец покупки
	OwnerID int `json:"ownerID"`

	// Время совершения покупки
	Time string `json:"time"`
}

// ShoppingWithId defines model for Shopping_with_id.
type ShoppingWithId struct {
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema

	// Идентификатор покупки
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Shopping_params)
	ShoppingParams
}

// Success defines model for Success.
type Success struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema

	// Ошибки ответа
	Errors []interface{} `json:"errors"`

	// Сообщение ответа
	Message string `json:"message"`
}

// ShoppingDaysErrors defines model for shoppingDaysErrors.
type ShoppingDaysErrors struct {
	Validation *ShoppingDaysValidation `json:"validation,omitempty"`
}

// ShoppingDaysValidation defines model for shoppingDaysValidation.
type ShoppingDaysValidation struct {
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// ShoppingItemParams defines model for shoppingItemParams.
type ShoppingItemParams struct {

	// Идентификатор категории товара
	CategoryID int `json:"categoryID"`

	// Признак выполнения
	Complete bool `json:"complete"`

	// Идентификатор списка покупок
	ListID int `json:"listID"`

	// Наименование товара
	ProductName string `json:"productName"`

	// Количество товара
	Quantity int `json:"quantity"`
}

// ShoppingItemParamsWithId defines model for shoppingItemParamsWithId.
type ShoppingItemParamsWithId struct {
	// Embedded fields due to inline allOf schema

	// Идентификатор товара
	Id *int `json:"id,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
	// Embedded fields due to inline allOf schema
}

// ShoppingsByDayErrors defines model for shoppingsByDayErrors.
type ShoppingsByDayErrors struct {
	Validation *ShoppingsByDayValidation `json:"validation,omitempty"`
}

// ShoppingsByDayValidation defines model for shoppingsByDayValidation.
type ShoppingsByDayValidation struct {
	Day   *string `json:"day,omitempty"`
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// User defines model for user.
type User struct {

	// comunity_id
	ComunityId *string `json:"comunity_id,omitempty"`

	// id
	Id *int `json:"id,omitempty"`

	// telegram_id
	TelegramId *int `json:"telegram_id,omitempty"`

	// telegram_username
	TelegramUsername *string `json:"telegram_username,omitempty"`

	// token
	Token *string `json:"token,omitempty"`
}

// ComunityId defines model for comunity_id.
type ComunityId string

// Date defines model for date.
type Date string

// Day defines model for day.
type Day int

// Month defines model for month.
type Month int

// ShoppingID defines model for shoppingID.
type ShoppingID int

// TelegramUserId defines model for telegram_user_id.
type TelegramUserId int

// Year defines model for year.
type Year int

// Base200 defines model for Base_200.
type Base200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
}

// Base400 defines model for Base_400.
type Base400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
}

// Base401 defines model for Base_401.
type Base401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_401)
	Error401
}

// Base404 defines model for Base_404.
type Base404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404)
	Error404
}

// Base405 defines model for Base_405.
type Base405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405)
	Error405
}

// Base500 defines model for Base_500.
type Base500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500)
	Error500
}

// ComingShoppings200 defines model for ComingShoppings_200.
type ComingShoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ComingShoppings400 defines model for ComingShoppings_400.
type ComingShoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema

	// Свойства ошибки валидации
	Errors *ComingShoppingsProperty `json:"errors,omitempty"`
}

// Goods200 defines model for Goods_200.
type Goods200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItem `json:"data,omitempty"`
}

// Goods400 defines model for Goods_400.
type Goods400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			ShoppingID *string `json:"shoppingID,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// Item200 defines model for Item_200.
type Item200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingItemParamsWithId `json:"data,omitempty"`
}

// Item400 defines model for Item_400.
type Item400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {

			// Идентификатор категории товара
			CategoryID *string `json:"categoryID,omitempty"`

			// Идентификатор списка покупок
			ListID      *string `json:"listID,omitempty"`
			ProductName *string `json:"productName,omitempty"`

			// Количество товара
			Quantity *string `json:"quantity,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// LastShopping200 defines model for LastShopping_200.
type LastShopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// ShoppingDays200 defines model for ShoppingDays_200.
type ShoppingDays200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]int `json:"data,omitempty"`
}

// ShoppingDays400 defines model for ShoppingDays_400.
type ShoppingDays400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingDaysErrors `json:"errors,omitempty"`
}

// Shopping200 defines model for Shopping_200.
type Shopping200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *ShoppingWithId `json:"data,omitempty"`
}

// Shopping400 defines model for Shopping_400.
type Shopping400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingProperty `json:"errors,omitempty"`
}

// Shoppings200 defines model for Shoppings_200.
type Shoppings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]ShoppingWithId `json:"data,omitempty"`
}

// Shoppings400 defines model for Shoppings_400.
type Shoppings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors *ShoppingsByDayErrors `json:"errors,omitempty"`
}

// Users200 defines model for Users_200.
type Users200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]User `json:"data,omitempty"`
}

// DeleteItemsRequest defines model for Delete_items_request.
type DeleteItemsRequest DeleteIds

// DeleteShoppingsRequest defines model for Delete_shoppings_request.
type DeleteShoppingsRequest DeleteIds

// ItemRequest defines model for Item_request.
type ItemRequest struct {
	// Embedded struct due to allOf(#/components/schemas/shoppingItemParams)
	ShoppingItemParams
}

// ShoppingRequest defines model for Shopping_request.
type ShoppingRequest struct {
	// Embedded struct due to allOf(#/components/schemas/Shopping)
	Shopping
}

// UserRequest defines model for User_request.
type UserRequest User

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {

	// telegram user id
	TelegramUserId *TelegramUserId `json:"telegram_user_id,omitempty"`

	// comunity_id
	ComunityId *ComunityId `json:"comunity_id,omitempty"`
}

// AddItemRequestBody defines body for AddItem for application/json ContentType.
type AddItemJSONRequestBody ItemRequest

// AddShoppingRequestBody defines body for AddShopping for application/json ContentType.
type AddShoppingJSONRequestBody ShoppingRequest

// DeleteItemsRequestBody defines body for DeleteItems for application/json ContentType.
type DeleteItemsJSONRequestBody DeleteItemsRequest

// DeleteShoppingsRequestBody defines body for DeleteShoppings for application/json ContentType.
type DeleteShoppingsJSONRequestBody DeleteShoppingsRequest

// UpdateUserRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UserRequest

// CreateUserRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody UserRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AddItem request  with any body
	AddItemWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	AddItem(ctx context.Context, body AddItemJSONRequestBody) (*http.Response, error)

	// AddShopping request  with any body
	AddShoppingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	AddShopping(ctx context.Context, body AddShoppingJSONRequestBody) (*http.Response, error)

	// DeleteItems request  with any body
	DeleteItemsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	DeleteItems(ctx context.Context, body DeleteItemsJSONRequestBody) (*http.Response, error)

	// DeleteShoppings request  with any body
	DeleteShoppingsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	DeleteShoppings(ctx context.Context, body DeleteShoppingsJSONRequestBody) (*http.Response, error)

	// GetComingShoppings request
	GetComingShoppings(ctx context.Context, date Date) (*http.Response, error)

	// GetGoods request
	GetGoods(ctx context.Context, shoppingID ShoppingID) (*http.Response, error)

	// GetShopping request
	GetShopping(ctx context.Context, shoppingID ShoppingID) (*http.Response, error)

	// GetShoppingDays request
	GetShoppingDays(ctx context.Context, year Year, month Month) (*http.Response, error)

	// GetShoppingsByDay request
	GetShoppingsByDay(ctx context.Context, year Year, month Month, day Day) (*http.Response, error)

	// LastShopping request
	LastShopping(ctx context.Context) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, params *GetUserParams) (*http.Response, error)

	// UpdateUser request  with any body
	UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody) (*http.Response, error)

	// CreateUser request  with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody) (*http.Response, error)
}

func (c *Client) AddItemWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddItemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddItem(ctx context.Context, body AddItemJSONRequestBody) (*http.Response, error) {
	req, err := NewAddItemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddShoppingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddShoppingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddShopping(ctx context.Context, body AddShoppingJSONRequestBody) (*http.Response, error) {
	req, err := NewAddShoppingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteItemsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteItemsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteItems(ctx context.Context, body DeleteItemsJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteItemsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShoppingsWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewDeleteShoppingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteShoppings(ctx context.Context, body DeleteShoppingsJSONRequestBody) (*http.Response, error) {
	req, err := NewDeleteShoppingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetComingShoppings(ctx context.Context, date Date) (*http.Response, error) {
	req, err := NewGetComingShoppingsRequest(c.Server, date)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetGoods(ctx context.Context, shoppingID ShoppingID) (*http.Response, error) {
	req, err := NewGetGoodsRequest(c.Server, shoppingID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetShopping(ctx context.Context, shoppingID ShoppingID) (*http.Response, error) {
	req, err := NewGetShoppingRequest(c.Server, shoppingID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetShoppingDays(ctx context.Context, year Year, month Month) (*http.Response, error) {
	req, err := NewGetShoppingDaysRequest(c.Server, year, month)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetShoppingsByDay(ctx context.Context, year Year, month Month, day Day) (*http.Response, error) {
	req, err := NewGetShoppingsByDayRequest(c.Server, year, month, day)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LastShopping(ctx context.Context) (*http.Response, error) {
	req, err := NewLastShoppingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, params *GetUserParams) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewAddItemRequest calls the generic AddItem builder with application/json body
func NewAddItemRequest(server string, body AddItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddItemRequestWithBody(server, "application/json", bodyReader)
}

// NewAddItemRequestWithBody generates requests for AddItem with any type of body
func NewAddItemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/addItem"))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewAddShoppingRequest calls the generic AddShopping builder with application/json body
func NewAddShoppingRequest(server string, body AddShoppingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddShoppingRequestWithBody(server, "application/json", bodyReader)
}

// NewAddShoppingRequestWithBody generates requests for AddShopping with any type of body
func NewAddShoppingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/addShopping"))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteItemsRequest calls the generic DeleteItems builder with application/json body
func NewDeleteItemsRequest(server string, body DeleteItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteItemsRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteItemsRequestWithBody generates requests for DeleteItems with any type of body
func NewDeleteItemsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/deleteItems"))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteShoppingsRequest calls the generic DeleteShoppings builder with application/json body
func NewDeleteShoppingsRequest(server string, body DeleteShoppingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteShoppingsRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteShoppingsRequestWithBody generates requests for DeleteShoppings with any type of body
func NewDeleteShoppingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/deleteShoppings"))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetComingShoppingsRequest generates requests for GetComingShoppings
func NewGetComingShoppingsRequest(server string, date Date) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "date", date)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/getComingShoppings/%s", pathParam0))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGoodsRequest generates requests for GetGoods
func NewGetGoodsRequest(server string, shoppingID ShoppingID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "shoppingID", shoppingID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/getGoods/%s", pathParam0))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShoppingRequest generates requests for GetShopping
func NewGetShoppingRequest(server string, shoppingID ShoppingID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "shoppingID", shoppingID)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/getShopping/%s", pathParam0))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShoppingDaysRequest generates requests for GetShoppingDays
func NewGetShoppingDaysRequest(server string, year Year, month Month) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "year", year)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "month", month)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/getShoppingDays/%s/%s", pathParam0, pathParam1))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetShoppingsByDayRequest generates requests for GetShoppingsByDay
func NewGetShoppingsByDayRequest(server string, year Year, month Month, day Day) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "year", year)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "month", month)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParam("simple", false, "day", day)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/getShoppingsByDay/%s/%s/%s", pathParam0, pathParam1, pathParam2))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLastShoppingRequest generates requests for LastShopping
func NewLastShoppingRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/lastShopping"))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, params *GetUserParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/users"))
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.TelegramUserId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "telegram_user_id", *params.TelegramUserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ComunityId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "comunity_id", *params.ComunityId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/users"))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl, err = queryUrl.Parse(fmt.Sprintf("/users"))
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		if !strings.HasSuffix(baseURL, "/") {
			baseURL += "/"
		}
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

type addItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
		// Embedded fields due to inline allOf schema
		Data *[]ShoppingItemParamsWithId `json:"data,omitempty"`
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_400)
		Error400
		// Embedded fields due to inline allOf schema
		Errors *struct {
			Validation *struct {

				// Идентификатор категории товара
				CategoryID *string `json:"categoryID,omitempty"`

				// Идентификатор списка покупок
				ListID      *string `json:"listID,omitempty"`
				ProductName *string `json:"productName,omitempty"`

				// Количество товара
				Quantity *string `json:"quantity,omitempty"`
			} `json:"validation,omitempty"`
		} `json:"errors,omitempty"`
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON404 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_404)
		Error404
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r addItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r addItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type addShoppingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
		// Embedded fields due to inline allOf schema
		Data *ShoppingWithId `json:"data,omitempty"`
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_400)
		Error400
		// Embedded fields due to inline allOf schema
		Errors *ShoppingProperty `json:"errors,omitempty"`
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r addShoppingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r addShoppingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type deleteItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_400)
		Error400
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r deleteItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r deleteItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type deleteShoppingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_400)
		Error400
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r deleteShoppingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r deleteShoppingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getComingShoppingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
		// Embedded fields due to inline allOf schema
		Data *[]ShoppingWithId `json:"data,omitempty"`
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_400)
		Error400
		// Embedded fields due to inline allOf schema

		// Свойства ошибки валидации
		Errors *ComingShoppingsProperty `json:"errors,omitempty"`
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON404 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_404)
		Error404
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r getComingShoppingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getComingShoppingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getGoodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
		// Embedded fields due to inline allOf schema
		Data *[]ShoppingItem `json:"data,omitempty"`
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_400)
		Error400
		// Embedded fields due to inline allOf schema
		Errors *struct {
			Validation *struct {
				ShoppingID *string `json:"shoppingID,omitempty"`
			} `json:"validation,omitempty"`
		} `json:"errors,omitempty"`
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON404 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_404)
		Error404
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r getGoodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getGoodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getShoppingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
		// Embedded fields due to inline allOf schema
		Data *ShoppingWithId `json:"data,omitempty"`
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON404 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_404)
		Error404
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r getShoppingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getShoppingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getShoppingDaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
		// Embedded fields due to inline allOf schema
		Data *[]int `json:"data,omitempty"`
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_400)
		Error400
		// Embedded fields due to inline allOf schema
		Errors *ShoppingDaysErrors `json:"errors,omitempty"`
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r getShoppingDaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getShoppingDaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getShoppingsByDayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
		// Embedded fields due to inline allOf schema
		Data *[]ShoppingWithId `json:"data,omitempty"`
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_400)
		Error400
		// Embedded fields due to inline allOf schema
		Errors *ShoppingsByDayErrors `json:"errors,omitempty"`
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r getShoppingsByDayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getShoppingsByDayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type lastShoppingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
		// Embedded fields due to inline allOf schema
		Data *[]ShoppingWithId `json:"data,omitempty"`
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON404 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_404)
		Error404
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r lastShoppingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r lastShoppingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
		// Embedded fields due to inline allOf schema
		Data *[]User `json:"data,omitempty"`
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_400)
		Error400
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON404 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_404)
		Error404
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r getUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type updateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_400)
		Error400
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r updateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r updateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type createUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Success)
		Success
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_400)
		Error400
	}
	JSON401 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_401)
		Error401
	}
	JSON405 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_405)
		Error405
	}
	JSON500 *struct {
		// Embedded struct due to allOf(#/components/schemas/Error_500)
		Error500
	}
}

// Status returns HTTPResponse.Status
func (r createUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r createUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AddItemWithBodyWithResponse request with arbitrary body returning *AddItemResponse
func (c *ClientWithResponses) AddItemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*addItemResponse, error) {
	rsp, err := c.AddItemWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddItemResponse(rsp)
}

func (c *ClientWithResponses) AddItemWithResponse(ctx context.Context, body AddItemJSONRequestBody) (*addItemResponse, error) {
	rsp, err := c.AddItem(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseAddItemResponse(rsp)
}

// AddShoppingWithBodyWithResponse request with arbitrary body returning *AddShoppingResponse
func (c *ClientWithResponses) AddShoppingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*addShoppingResponse, error) {
	rsp, err := c.AddShoppingWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddShoppingResponse(rsp)
}

func (c *ClientWithResponses) AddShoppingWithResponse(ctx context.Context, body AddShoppingJSONRequestBody) (*addShoppingResponse, error) {
	rsp, err := c.AddShopping(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseAddShoppingResponse(rsp)
}

// DeleteItemsWithBodyWithResponse request with arbitrary body returning *DeleteItemsResponse
func (c *ClientWithResponses) DeleteItemsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*deleteItemsResponse, error) {
	rsp, err := c.DeleteItemsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteItemsResponse(rsp)
}

func (c *ClientWithResponses) DeleteItemsWithResponse(ctx context.Context, body DeleteItemsJSONRequestBody) (*deleteItemsResponse, error) {
	rsp, err := c.DeleteItems(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteItemsResponse(rsp)
}

// DeleteShoppingsWithBodyWithResponse request with arbitrary body returning *DeleteShoppingsResponse
func (c *ClientWithResponses) DeleteShoppingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*deleteShoppingsResponse, error) {
	rsp, err := c.DeleteShoppingsWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShoppingsResponse(rsp)
}

func (c *ClientWithResponses) DeleteShoppingsWithResponse(ctx context.Context, body DeleteShoppingsJSONRequestBody) (*deleteShoppingsResponse, error) {
	rsp, err := c.DeleteShoppings(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseDeleteShoppingsResponse(rsp)
}

// GetComingShoppingsWithResponse request returning *GetComingShoppingsResponse
func (c *ClientWithResponses) GetComingShoppingsWithResponse(ctx context.Context, date Date) (*getComingShoppingsResponse, error) {
	rsp, err := c.GetComingShoppings(ctx, date)
	if err != nil {
		return nil, err
	}
	return ParseGetComingShoppingsResponse(rsp)
}

// GetGoodsWithResponse request returning *GetGoodsResponse
func (c *ClientWithResponses) GetGoodsWithResponse(ctx context.Context, shoppingID ShoppingID) (*getGoodsResponse, error) {
	rsp, err := c.GetGoods(ctx, shoppingID)
	if err != nil {
		return nil, err
	}
	return ParseGetGoodsResponse(rsp)
}

// GetShoppingWithResponse request returning *GetShoppingResponse
func (c *ClientWithResponses) GetShoppingWithResponse(ctx context.Context, shoppingID ShoppingID) (*getShoppingResponse, error) {
	rsp, err := c.GetShopping(ctx, shoppingID)
	if err != nil {
		return nil, err
	}
	return ParseGetShoppingResponse(rsp)
}

// GetShoppingDaysWithResponse request returning *GetShoppingDaysResponse
func (c *ClientWithResponses) GetShoppingDaysWithResponse(ctx context.Context, year Year, month Month) (*getShoppingDaysResponse, error) {
	rsp, err := c.GetShoppingDays(ctx, year, month)
	if err != nil {
		return nil, err
	}
	return ParseGetShoppingDaysResponse(rsp)
}

// GetShoppingsByDayWithResponse request returning *GetShoppingsByDayResponse
func (c *ClientWithResponses) GetShoppingsByDayWithResponse(ctx context.Context, year Year, month Month, day Day) (*getShoppingsByDayResponse, error) {
	rsp, err := c.GetShoppingsByDay(ctx, year, month, day)
	if err != nil {
		return nil, err
	}
	return ParseGetShoppingsByDayResponse(rsp)
}

// LastShoppingWithResponse request returning *LastShoppingResponse
func (c *ClientWithResponses) LastShoppingWithResponse(ctx context.Context) (*lastShoppingResponse, error) {
	rsp, err := c.LastShopping(ctx)
	if err != nil {
		return nil, err
	}
	return ParseLastShoppingResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, params *GetUserParams) (*getUserResponse, error) {
	rsp, err := c.GetUser(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*updateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody) (*updateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*createUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody) (*createUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// ParseAddItemResponse parses an HTTP response from a AddItemWithResponse call
func ParseAddItemResponse(rsp *http.Response) (*addItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &addItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
			// Embedded fields due to inline allOf schema
			Data *[]ShoppingItemParamsWithId `json:"data,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_400)
			Error400
			// Embedded fields due to inline allOf schema
			Errors *struct {
				Validation *struct {

					// Идентификатор категории товара
					CategoryID *string `json:"categoryID,omitempty"`

					// Идентификатор списка покупок
					ListID      *string `json:"listID,omitempty"`
					ProductName *string `json:"productName,omitempty"`

					// Количество товара
					Quantity *string `json:"quantity,omitempty"`
				} `json:"validation,omitempty"`
			} `json:"errors,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_404)
			Error404
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseAddShoppingResponse parses an HTTP response from a AddShoppingWithResponse call
func ParseAddShoppingResponse(rsp *http.Response) (*addShoppingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &addShoppingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
			// Embedded fields due to inline allOf schema
			Data *ShoppingWithId `json:"data,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_400)
			Error400
			// Embedded fields due to inline allOf schema
			Errors *ShoppingProperty `json:"errors,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseDeleteItemsResponse parses an HTTP response from a DeleteItemsWithResponse call
func ParseDeleteItemsResponse(rsp *http.Response) (*deleteItemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &deleteItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_400)
			Error400
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseDeleteShoppingsResponse parses an HTTP response from a DeleteShoppingsWithResponse call
func ParseDeleteShoppingsResponse(rsp *http.Response) (*deleteShoppingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &deleteShoppingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_400)
			Error400
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseGetComingShoppingsResponse parses an HTTP response from a GetComingShoppingsWithResponse call
func ParseGetComingShoppingsResponse(rsp *http.Response) (*getComingShoppingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getComingShoppingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
			// Embedded fields due to inline allOf schema
			Data *[]ShoppingWithId `json:"data,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_400)
			Error400
			// Embedded fields due to inline allOf schema

			// Свойства ошибки валидации
			Errors *ComingShoppingsProperty `json:"errors,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_404)
			Error404
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseGetGoodsResponse parses an HTTP response from a GetGoodsWithResponse call
func ParseGetGoodsResponse(rsp *http.Response) (*getGoodsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getGoodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
			// Embedded fields due to inline allOf schema
			Data *[]ShoppingItem `json:"data,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_400)
			Error400
			// Embedded fields due to inline allOf schema
			Errors *struct {
				Validation *struct {
					ShoppingID *string `json:"shoppingID,omitempty"`
				} `json:"validation,omitempty"`
			} `json:"errors,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_404)
			Error404
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseGetShoppingResponse parses an HTTP response from a GetShoppingWithResponse call
func ParseGetShoppingResponse(rsp *http.Response) (*getShoppingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getShoppingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
			// Embedded fields due to inline allOf schema
			Data *ShoppingWithId `json:"data,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_404)
			Error404
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseGetShoppingDaysResponse parses an HTTP response from a GetShoppingDaysWithResponse call
func ParseGetShoppingDaysResponse(rsp *http.Response) (*getShoppingDaysResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getShoppingDaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
			// Embedded fields due to inline allOf schema
			Data *[]int `json:"data,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_400)
			Error400
			// Embedded fields due to inline allOf schema
			Errors *ShoppingDaysErrors `json:"errors,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseGetShoppingsByDayResponse parses an HTTP response from a GetShoppingsByDayWithResponse call
func ParseGetShoppingsByDayResponse(rsp *http.Response) (*getShoppingsByDayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getShoppingsByDayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
			// Embedded fields due to inline allOf schema
			Data *[]ShoppingWithId `json:"data,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_400)
			Error400
			// Embedded fields due to inline allOf schema
			Errors *ShoppingsByDayErrors `json:"errors,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseLastShoppingResponse parses an HTTP response from a LastShoppingWithResponse call
func ParseLastShoppingResponse(rsp *http.Response) (*lastShoppingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &lastShoppingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
			// Embedded fields due to inline allOf schema
			Data *[]ShoppingWithId `json:"data,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_404)
			Error404
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*getUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
			// Embedded fields due to inline allOf schema
			Data *[]User `json:"data,omitempty"`
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_400)
			Error400
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_404)
			Error404
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*updateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &updateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_400)
			Error400
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*createUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &createUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Success)
			Success
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_400)
			Error400
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		response.JSON401 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_401)
			Error401
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON401); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		response.JSON405 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_405)
			Error405
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON405); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		response.JSON500 = &struct {
			// Embedded struct due to allOf(#/components/schemas/Error_500)
			Error500
		}{}
		if err := json.Unmarshal(bodyBytes, response.JSON500); err != nil {
			return nil, err
		}

	}

	return response, nil
}

