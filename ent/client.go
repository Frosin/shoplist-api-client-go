// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Frosin/shoplist-api-client-go/ent/migrate"

	"github.com/Frosin/shoplist-api-client-go/ent/item"
	"github.com/Frosin/shoplist-api-client-go/ent/shop"
	"github.com/Frosin/shoplist-api-client-go/ent/shopping"
	"github.com/Frosin/shoplist-api-client-go/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Item is the client for interacting with the Item builders.
	Item *ItemClient
	// Shop is the client for interacting with the Shop builders.
	Shop *ShopClient
	// Shopping is the client for interacting with the Shopping builders.
	Shopping *ShoppingClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:   c,
		Schema:   migrate.NewSchema(c.driver),
		Item:     NewItemClient(c),
		Shop:     NewShopClient(c),
		Shopping: NewShoppingClient(c),
		User:     NewUserClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:   cfg,
		Item:     NewItemClient(cfg),
		Shop:     NewShopClient(cfg),
		Shopping: NewShoppingClient(cfg),
		User:     NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Item.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:   cfg,
		Schema:   migrate.NewSchema(cfg.driver),
		Item:     NewItemClient(cfg),
		Shop:     NewShopClient(cfg),
		Shopping: NewShoppingClient(cfg),
		User:     NewUserClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// ItemClient is a client for the Item schema.
type ItemClient struct {
	config
}

// NewItemClient returns a client for the Item from the given config.
func NewItemClient(c config) *ItemClient {
	return &ItemClient{config: c}
}

// Create returns a create builder for Item.
func (c *ItemClient) Create() *ItemCreate {
	return &ItemCreate{config: c.config}
}

// Update returns an update builder for Item.
func (c *ItemClient) Update() *ItemUpdate {
	return &ItemUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ItemClient) UpdateOne(i *Item) *ItemUpdateOne {
	return c.UpdateOneID(i.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ItemClient) UpdateOneID(id int) *ItemUpdateOne {
	return &ItemUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Item.
func (c *ItemClient) Delete() *ItemDelete {
	return &ItemDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ItemClient) DeleteOne(i *Item) *ItemDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ItemClient) DeleteOneID(id int) *ItemDeleteOne {
	return &ItemDeleteOne{c.Delete().Where(item.ID(id))}
}

// Create returns a query builder for Item.
func (c *ItemClient) Query() *ItemQuery {
	return &ItemQuery{config: c.config}
}

// Get returns a Item entity by its id.
func (c *ItemClient) Get(ctx context.Context, id int) (*Item, error) {
	return c.Query().Where(item.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ItemClient) GetX(ctx context.Context, id int) *Item {
	i, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return i
}

// QueryShopping queries the shopping edge of a Item.
func (c *ItemClient) QueryShopping(i *Item) *ShoppingQuery {
	query := &ShoppingQuery{config: c.config}
	id := i.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(item.Table, item.FieldID, id),
		sqlgraph.To(shopping.Table, shopping.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, item.ShoppingTable, item.ShoppingColumn),
	)
	query.sql = sqlgraph.Neighbors(i.driver.Dialect(), step)

	return query
}

// ShopClient is a client for the Shop schema.
type ShopClient struct {
	config
}

// NewShopClient returns a client for the Shop from the given config.
func NewShopClient(c config) *ShopClient {
	return &ShopClient{config: c}
}

// Create returns a create builder for Shop.
func (c *ShopClient) Create() *ShopCreate {
	return &ShopCreate{config: c.config}
}

// Update returns an update builder for Shop.
func (c *ShopClient) Update() *ShopUpdate {
	return &ShopUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShopClient) UpdateOne(s *Shop) *ShopUpdateOne {
	return c.UpdateOneID(s.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ShopClient) UpdateOneID(id int) *ShopUpdateOne {
	return &ShopUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Shop.
func (c *ShopClient) Delete() *ShopDelete {
	return &ShopDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShopClient) DeleteOne(s *Shop) *ShopDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShopClient) DeleteOneID(id int) *ShopDeleteOne {
	return &ShopDeleteOne{c.Delete().Where(shop.ID(id))}
}

// Create returns a query builder for Shop.
func (c *ShopClient) Query() *ShopQuery {
	return &ShopQuery{config: c.config}
}

// Get returns a Shop entity by its id.
func (c *ShopClient) Get(ctx context.Context, id int) (*Shop, error) {
	return c.Query().Where(shop.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShopClient) GetX(ctx context.Context, id int) *Shop {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryShopping queries the shopping edge of a Shop.
func (c *ShopClient) QueryShopping(s *Shop) *ShoppingQuery {
	query := &ShoppingQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(shop.Table, shop.FieldID, id),
		sqlgraph.To(shopping.Table, shopping.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, shop.ShoppingTable, shop.ShoppingColumn),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// ShoppingClient is a client for the Shopping schema.
type ShoppingClient struct {
	config
}

// NewShoppingClient returns a client for the Shopping from the given config.
func NewShoppingClient(c config) *ShoppingClient {
	return &ShoppingClient{config: c}
}

// Create returns a create builder for Shopping.
func (c *ShoppingClient) Create() *ShoppingCreate {
	return &ShoppingCreate{config: c.config}
}

// Update returns an update builder for Shopping.
func (c *ShoppingClient) Update() *ShoppingUpdate {
	return &ShoppingUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShoppingClient) UpdateOne(s *Shopping) *ShoppingUpdateOne {
	return c.UpdateOneID(s.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ShoppingClient) UpdateOneID(id int) *ShoppingUpdateOne {
	return &ShoppingUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Shopping.
func (c *ShoppingClient) Delete() *ShoppingDelete {
	return &ShoppingDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShoppingClient) DeleteOne(s *Shopping) *ShoppingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShoppingClient) DeleteOneID(id int) *ShoppingDeleteOne {
	return &ShoppingDeleteOne{c.Delete().Where(shopping.ID(id))}
}

// Create returns a query builder for Shopping.
func (c *ShoppingClient) Query() *ShoppingQuery {
	return &ShoppingQuery{config: c.config}
}

// Get returns a Shopping entity by its id.
func (c *ShoppingClient) Get(ctx context.Context, id int) (*Shopping, error) {
	return c.Query().Where(shopping.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShoppingClient) GetX(ctx context.Context, id int) *Shopping {
	s, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return s
}

// QueryItem queries the item edge of a Shopping.
func (c *ShoppingClient) QueryItem(s *Shopping) *ItemQuery {
	query := &ItemQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(shopping.Table, shopping.FieldID, id),
		sqlgraph.To(item.Table, item.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, shopping.ItemTable, shopping.ItemColumn),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// QueryShop queries the shop edge of a Shopping.
func (c *ShoppingClient) QueryShop(s *Shopping) *ShopQuery {
	query := &ShopQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(shopping.Table, shopping.FieldID, id),
		sqlgraph.To(shop.Table, shop.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, shopping.ShopTable, shopping.ShopColumn),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// QueryUser queries the user edge of a Shopping.
func (c *ShoppingClient) QueryUser(s *Shopping) *UserQuery {
	query := &UserQuery{config: c.config}
	id := s.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(shopping.Table, shopping.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, shopping.UserTable, shopping.UserColumn),
	)
	query.sql = sqlgraph.Neighbors(s.driver.Dialect(), step)

	return query
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	return &UserCreate{config: c.config}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	return &UserUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	return c.UpdateOneID(u.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	return &UserUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	return &UserDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	return &UserDeleteOne{c.Delete().Where(user.ID(id))}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryShopping queries the shopping edge of a User.
func (c *UserClient) QueryShopping(u *User) *ShoppingQuery {
	query := &ShoppingQuery{config: c.config}
	id := u.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(user.Table, user.FieldID, id),
		sqlgraph.To(shopping.Table, shopping.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, user.ShoppingTable, user.ShoppingColumn),
	)
	query.sql = sqlgraph.Neighbors(u.driver.Dialect(), step)

	return query
}
