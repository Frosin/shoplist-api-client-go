// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"log"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// dsn for the database. In order to run the tests locally, run the following command:
//
//	 ENT_INTEGRATION_ENDPOINT="root:pass@tcp(localhost:3306)/test?parseTime=True" go test -v
//
var dsn string

func ExampleItem() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the item's edges.

	// create item vertex with its edges.
	i := client.Item.
		Create().
		SetProductName("string").
		SetQuantity(1).
		SetCategoryID(1).
		SetComplete(true).
		SaveX(ctx)
	log.Println("item created:", i)

	// query edges.

	// Output:
}
func ExampleShop() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the shop's edges.
	s0 := client.Shopping.
		Create().
		SetDate(time.Now()).
		SetSum(1).
		SetComplete(true).
		SaveX(ctx)
	log.Println("shopping created:", s0)

	// create shop vertex with its edges.
	s := client.Shop.
		Create().
		SetName("string").
		AddShopping(s0).
		SaveX(ctx)
	log.Println("shop created:", s)

	// query edges.
	s0, err = s.QueryShopping().First(ctx)
	if err != nil {
		log.Fatalf("failed querying shopping: %v", err)
	}
	log.Println("shopping found:", s0)

	// Output:
}
func ExampleShopping() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the shopping's edges.
	i0 := client.Item.
		Create().
		SetProductName("string").
		SetQuantity(1).
		SetCategoryID(1).
		SetComplete(true).
		SaveX(ctx)
	log.Println("item created:", i0)

	// create shopping vertex with its edges.
	s := client.Shopping.
		Create().
		SetDate(time.Now()).
		SetSum(1).
		SetComplete(true).
		AddItem(i0).
		SaveX(ctx)
	log.Println("shopping created:", s)

	// query edges.
	i0, err = s.QueryItem().First(ctx)
	if err != nil {
		log.Fatalf("failed querying item: %v", err)
	}
	log.Println("item found:", i0)

	// Output:
}
func ExampleUser() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the user's edges.
	s0 := client.Shopping.
		Create().
		SetDate(time.Now()).
		SetSum(1).
		SetComplete(true).
		SaveX(ctx)
	log.Println("shopping created:", s0)

	// create user vertex with its edges.
	u := client.User.
		Create().
		SetTelegramID(1).
		SetTelegramUsername("string").
		SetComunityID("string").
		SetToken("string").
		SetChatID(1).
		AddShopping(s0).
		SaveX(ctx)
	log.Println("user created:", u)

	// query edges.
	s0, err = u.QueryShopping().First(ctx)
	if err != nil {
		log.Fatalf("failed querying shopping: %v", err)
	}
	log.Println("shopping found:", s0)

	// Output:
}
