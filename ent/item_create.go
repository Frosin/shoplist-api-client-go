// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/Frosin/shoplist-api-client-go/ent/item"
	"github.com/Frosin/shoplist-api-client-go/ent/shopping"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ItemCreate is the builder for creating a Item entity.
type ItemCreate struct {
	config
	mutation *ItemMutation
	hooks    []Hook
}

// SetProductName sets the product_name field.
func (ic *ItemCreate) SetProductName(s string) *ItemCreate {
	ic.mutation.SetProductName(s)
	return ic
}

// SetQuantity sets the quantity field.
func (ic *ItemCreate) SetQuantity(i int) *ItemCreate {
	ic.mutation.SetQuantity(i)
	return ic
}

// SetNillableQuantity sets the quantity field if the given value is not nil.
func (ic *ItemCreate) SetNillableQuantity(i *int) *ItemCreate {
	if i != nil {
		ic.SetQuantity(*i)
	}
	return ic
}

// SetCategoryID sets the category_id field.
func (ic *ItemCreate) SetCategoryID(i int) *ItemCreate {
	ic.mutation.SetCategoryID(i)
	return ic
}

// SetNillableCategoryID sets the category_id field if the given value is not nil.
func (ic *ItemCreate) SetNillableCategoryID(i *int) *ItemCreate {
	if i != nil {
		ic.SetCategoryID(*i)
	}
	return ic
}

// SetComplete sets the complete field.
func (ic *ItemCreate) SetComplete(b bool) *ItemCreate {
	ic.mutation.SetComplete(b)
	return ic
}

// SetNillableComplete sets the complete field if the given value is not nil.
func (ic *ItemCreate) SetNillableComplete(b *bool) *ItemCreate {
	if b != nil {
		ic.SetComplete(*b)
	}
	return ic
}

// SetShoppingID sets the shopping edge to Shopping by id.
func (ic *ItemCreate) SetShoppingID(id int) *ItemCreate {
	ic.mutation.SetShoppingID(id)
	return ic
}

// SetNillableShoppingID sets the shopping edge to Shopping by id if the given value is not nil.
func (ic *ItemCreate) SetNillableShoppingID(id *int) *ItemCreate {
	if id != nil {
		ic = ic.SetShoppingID(*id)
	}
	return ic
}

// SetShopping sets the shopping edge to Shopping.
func (ic *ItemCreate) SetShopping(s *Shopping) *ItemCreate {
	return ic.SetShoppingID(s.ID)
}

// Save creates the Item in the database.
func (ic *ItemCreate) Save(ctx context.Context) (*Item, error) {
	if _, ok := ic.mutation.ProductName(); !ok {
		return nil, errors.New("ent: missing required field \"product_name\"")
	}
	if v, ok := ic.mutation.ProductName(); ok {
		if err := item.ProductNameValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"product_name\": %v", err)
		}
	}
	if _, ok := ic.mutation.Quantity(); !ok {
		v := item.DefaultQuantity
		ic.mutation.SetQuantity(v)
	}
	if _, ok := ic.mutation.CategoryID(); !ok {
		v := item.DefaultCategoryID
		ic.mutation.SetCategoryID(v)
	}
	if _, ok := ic.mutation.Complete(); !ok {
		v := item.DefaultComplete
		ic.mutation.SetComplete(v)
	}
	var (
		err  error
		node *Item
	)
	if len(ic.hooks) == 0 {
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ItemCreate) SaveX(ctx context.Context) *Item {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ic *ItemCreate) sqlSave(ctx context.Context) (*Item, error) {
	var (
		i     = &Item{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: item.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.ProductName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldProductName,
		})
		i.ProductName = value
	}
	if value, ok := ic.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldQuantity,
		})
		i.Quantity = value
	}
	if value, ok := ic.mutation.CategoryID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldCategoryID,
		})
		i.CategoryID = value
	}
	if value, ok := ic.mutation.Complete(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: item.FieldComplete,
		})
		i.Complete = value
	}
	if nodes := ic.mutation.ShoppingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.ShoppingTable,
			Columns: []string{item.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	i.ID = int(id)
	return i, nil
}
