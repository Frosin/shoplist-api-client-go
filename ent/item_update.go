// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Frosin/shoplist-api-client-go/ent/item"
	"github.com/Frosin/shoplist-api-client-go/ent/predicate"
	"github.com/Frosin/shoplist-api-client-go/ent/shopping"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	hooks      []Hook
	mutation   *ItemMutation
	predicates []predicate.Item
}

// Where adds a new predicate for the builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.predicates = append(iu.predicates, ps...)
	return iu
}

// SetProductName sets the product_name field.
func (iu *ItemUpdate) SetProductName(s string) *ItemUpdate {
	iu.mutation.SetProductName(s)
	return iu
}

// SetQuantity sets the quantity field.
func (iu *ItemUpdate) SetQuantity(i int) *ItemUpdate {
	iu.mutation.ResetQuantity()
	iu.mutation.SetQuantity(i)
	return iu
}

// SetNillableQuantity sets the quantity field if the given value is not nil.
func (iu *ItemUpdate) SetNillableQuantity(i *int) *ItemUpdate {
	if i != nil {
		iu.SetQuantity(*i)
	}
	return iu
}

// AddQuantity adds i to quantity.
func (iu *ItemUpdate) AddQuantity(i int) *ItemUpdate {
	iu.mutation.AddQuantity(i)
	return iu
}

// SetCategoryID sets the category_id field.
func (iu *ItemUpdate) SetCategoryID(i int) *ItemUpdate {
	iu.mutation.ResetCategoryID()
	iu.mutation.SetCategoryID(i)
	return iu
}

// SetNillableCategoryID sets the category_id field if the given value is not nil.
func (iu *ItemUpdate) SetNillableCategoryID(i *int) *ItemUpdate {
	if i != nil {
		iu.SetCategoryID(*i)
	}
	return iu
}

// AddCategoryID adds i to category_id.
func (iu *ItemUpdate) AddCategoryID(i int) *ItemUpdate {
	iu.mutation.AddCategoryID(i)
	return iu
}

// SetComplete sets the complete field.
func (iu *ItemUpdate) SetComplete(b bool) *ItemUpdate {
	iu.mutation.SetComplete(b)
	return iu
}

// SetNillableComplete sets the complete field if the given value is not nil.
func (iu *ItemUpdate) SetNillableComplete(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetComplete(*b)
	}
	return iu
}

// SetShoppingID sets the shopping edge to Shopping by id.
func (iu *ItemUpdate) SetShoppingID(id int) *ItemUpdate {
	iu.mutation.SetShoppingID(id)
	return iu
}

// SetNillableShoppingID sets the shopping edge to Shopping by id if the given value is not nil.
func (iu *ItemUpdate) SetNillableShoppingID(id *int) *ItemUpdate {
	if id != nil {
		iu = iu.SetShoppingID(*id)
	}
	return iu
}

// SetShopping sets the shopping edge to Shopping.
func (iu *ItemUpdate) SetShopping(s *Shopping) *ItemUpdate {
	return iu.SetShoppingID(s.ID)
}

// ClearShopping clears the shopping edge to Shopping.
func (iu *ItemUpdate) ClearShopping() *ItemUpdate {
	iu.mutation.ClearShopping()
	return iu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := iu.mutation.ProductName(); ok {
		if err := item.ProductNameValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"product_name\": %v", err)
		}
	}

	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	if ps := iu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldProductName,
		})
	}
	if value, ok := iu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldQuantity,
		})
	}
	if value, ok := iu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldQuantity,
		})
	}
	if value, ok := iu.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldCategoryID,
		})
	}
	if value, ok := iu.mutation.AddedCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldCategoryID,
		})
	}
	if value, ok := iu.mutation.Complete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: item.FieldComplete,
		})
	}
	if iu.mutation.ShoppingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.ShoppingTable,
			Columns: []string{item.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ShoppingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.ShoppingTable,
			Columns: []string{item.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	hooks    []Hook
	mutation *ItemMutation
}

// SetProductName sets the product_name field.
func (iuo *ItemUpdateOne) SetProductName(s string) *ItemUpdateOne {
	iuo.mutation.SetProductName(s)
	return iuo
}

// SetQuantity sets the quantity field.
func (iuo *ItemUpdateOne) SetQuantity(i int) *ItemUpdateOne {
	iuo.mutation.ResetQuantity()
	iuo.mutation.SetQuantity(i)
	return iuo
}

// SetNillableQuantity sets the quantity field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableQuantity(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetQuantity(*i)
	}
	return iuo
}

// AddQuantity adds i to quantity.
func (iuo *ItemUpdateOne) AddQuantity(i int) *ItemUpdateOne {
	iuo.mutation.AddQuantity(i)
	return iuo
}

// SetCategoryID sets the category_id field.
func (iuo *ItemUpdateOne) SetCategoryID(i int) *ItemUpdateOne {
	iuo.mutation.ResetCategoryID()
	iuo.mutation.SetCategoryID(i)
	return iuo
}

// SetNillableCategoryID sets the category_id field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableCategoryID(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetCategoryID(*i)
	}
	return iuo
}

// AddCategoryID adds i to category_id.
func (iuo *ItemUpdateOne) AddCategoryID(i int) *ItemUpdateOne {
	iuo.mutation.AddCategoryID(i)
	return iuo
}

// SetComplete sets the complete field.
func (iuo *ItemUpdateOne) SetComplete(b bool) *ItemUpdateOne {
	iuo.mutation.SetComplete(b)
	return iuo
}

// SetNillableComplete sets the complete field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableComplete(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetComplete(*b)
	}
	return iuo
}

// SetShoppingID sets the shopping edge to Shopping by id.
func (iuo *ItemUpdateOne) SetShoppingID(id int) *ItemUpdateOne {
	iuo.mutation.SetShoppingID(id)
	return iuo
}

// SetNillableShoppingID sets the shopping edge to Shopping by id if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableShoppingID(id *int) *ItemUpdateOne {
	if id != nil {
		iuo = iuo.SetShoppingID(*id)
	}
	return iuo
}

// SetShopping sets the shopping edge to Shopping.
func (iuo *ItemUpdateOne) SetShopping(s *Shopping) *ItemUpdateOne {
	return iuo.SetShoppingID(s.ID)
}

// ClearShopping clears the shopping edge to Shopping.
func (iuo *ItemUpdateOne) ClearShopping() *ItemUpdateOne {
	iuo.mutation.ClearShopping()
	return iuo
}

// Save executes the query and returns the updated entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	if v, ok := iuo.mutation.ProductName(); ok {
		if err := item.ProductNameValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"product_name\": %v", err)
		}
	}

	var (
		err  error
		node *Item
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	i, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return i
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (i *Item, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Item.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := iuo.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldProductName,
		})
	}
	if value, ok := iuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldQuantity,
		})
	}
	if value, ok := iuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldQuantity,
		})
	}
	if value, ok := iuo.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldCategoryID,
		})
	}
	if value, ok := iuo.mutation.AddedCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldCategoryID,
		})
	}
	if value, ok := iuo.mutation.Complete(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: item.FieldComplete,
		})
	}
	if iuo.mutation.ShoppingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.ShoppingTable,
			Columns: []string{item.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ShoppingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.ShoppingTable,
			Columns: []string{item.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	i = &Item{config: iuo.config}
	_spec.Assign = i.assignValues
	_spec.ScanValues = i.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return i, nil
}
