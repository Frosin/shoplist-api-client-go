// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/Frosin/shoplist-api-client-go/ent/item"
	"github.com/Frosin/shoplist-api-client-go/ent/predicate"
	"github.com/Frosin/shoplist-api-client-go/ent/shopping"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	product_name    *string
	quantity        *int
	addquantity     *int
	category_id     *int
	addcategory_id  *int
	complete        *bool
	shopping        map[int]struct{}
	clearedShopping bool
	predicates      []predicate.Item
}

// Where adds a new predicate for the builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.predicates = append(iu.predicates, ps...)
	return iu
}

// SetProductName sets the product_name field.
func (iu *ItemUpdate) SetProductName(s string) *ItemUpdate {
	iu.product_name = &s
	return iu
}

// SetQuantity sets the quantity field.
func (iu *ItemUpdate) SetQuantity(i int) *ItemUpdate {
	iu.quantity = &i
	iu.addquantity = nil
	return iu
}

// SetNillableQuantity sets the quantity field if the given value is not nil.
func (iu *ItemUpdate) SetNillableQuantity(i *int) *ItemUpdate {
	if i != nil {
		iu.SetQuantity(*i)
	}
	return iu
}

// AddQuantity adds i to quantity.
func (iu *ItemUpdate) AddQuantity(i int) *ItemUpdate {
	if iu.addquantity == nil {
		iu.addquantity = &i
	} else {
		*iu.addquantity += i
	}
	return iu
}

// SetCategoryID sets the category_id field.
func (iu *ItemUpdate) SetCategoryID(i int) *ItemUpdate {
	iu.category_id = &i
	iu.addcategory_id = nil
	return iu
}

// SetNillableCategoryID sets the category_id field if the given value is not nil.
func (iu *ItemUpdate) SetNillableCategoryID(i *int) *ItemUpdate {
	if i != nil {
		iu.SetCategoryID(*i)
	}
	return iu
}

// AddCategoryID adds i to category_id.
func (iu *ItemUpdate) AddCategoryID(i int) *ItemUpdate {
	if iu.addcategory_id == nil {
		iu.addcategory_id = &i
	} else {
		*iu.addcategory_id += i
	}
	return iu
}

// SetComplete sets the complete field.
func (iu *ItemUpdate) SetComplete(b bool) *ItemUpdate {
	iu.complete = &b
	return iu
}

// SetNillableComplete sets the complete field if the given value is not nil.
func (iu *ItemUpdate) SetNillableComplete(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetComplete(*b)
	}
	return iu
}

// SetShoppingID sets the shopping edge to Shopping by id.
func (iu *ItemUpdate) SetShoppingID(id int) *ItemUpdate {
	if iu.shopping == nil {
		iu.shopping = make(map[int]struct{})
	}
	iu.shopping[id] = struct{}{}
	return iu
}

// SetNillableShoppingID sets the shopping edge to Shopping by id if the given value is not nil.
func (iu *ItemUpdate) SetNillableShoppingID(id *int) *ItemUpdate {
	if id != nil {
		iu = iu.SetShoppingID(*id)
	}
	return iu
}

// SetShopping sets the shopping edge to Shopping.
func (iu *ItemUpdate) SetShopping(s *Shopping) *ItemUpdate {
	return iu.SetShoppingID(s.ID)
}

// ClearShopping clears the shopping edge to Shopping.
func (iu *ItemUpdate) ClearShopping() *ItemUpdate {
	iu.clearedShopping = true
	return iu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	if iu.product_name != nil {
		if err := item.ProductNameValidator(*iu.product_name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"product_name\": %v", err)
		}
	}
	if len(iu.shopping) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"shopping\"")
	}
	return iu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	if ps := iu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := iu.product_name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: item.FieldProductName,
		})
	}
	if value := iu.quantity; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: item.FieldQuantity,
		})
	}
	if value := iu.addquantity; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: item.FieldQuantity,
		})
	}
	if value := iu.category_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: item.FieldCategoryID,
		})
	}
	if value := iu.addcategory_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: item.FieldCategoryID,
		})
	}
	if value := iu.complete; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: item.FieldComplete,
		})
	}
	if iu.clearedShopping {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.ShoppingTable,
			Columns: []string{item.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.shopping; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.ShoppingTable,
			Columns: []string{item.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	id              int
	product_name    *string
	quantity        *int
	addquantity     *int
	category_id     *int
	addcategory_id  *int
	complete        *bool
	shopping        map[int]struct{}
	clearedShopping bool
}

// SetProductName sets the product_name field.
func (iuo *ItemUpdateOne) SetProductName(s string) *ItemUpdateOne {
	iuo.product_name = &s
	return iuo
}

// SetQuantity sets the quantity field.
func (iuo *ItemUpdateOne) SetQuantity(i int) *ItemUpdateOne {
	iuo.quantity = &i
	iuo.addquantity = nil
	return iuo
}

// SetNillableQuantity sets the quantity field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableQuantity(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetQuantity(*i)
	}
	return iuo
}

// AddQuantity adds i to quantity.
func (iuo *ItemUpdateOne) AddQuantity(i int) *ItemUpdateOne {
	if iuo.addquantity == nil {
		iuo.addquantity = &i
	} else {
		*iuo.addquantity += i
	}
	return iuo
}

// SetCategoryID sets the category_id field.
func (iuo *ItemUpdateOne) SetCategoryID(i int) *ItemUpdateOne {
	iuo.category_id = &i
	iuo.addcategory_id = nil
	return iuo
}

// SetNillableCategoryID sets the category_id field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableCategoryID(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetCategoryID(*i)
	}
	return iuo
}

// AddCategoryID adds i to category_id.
func (iuo *ItemUpdateOne) AddCategoryID(i int) *ItemUpdateOne {
	if iuo.addcategory_id == nil {
		iuo.addcategory_id = &i
	} else {
		*iuo.addcategory_id += i
	}
	return iuo
}

// SetComplete sets the complete field.
func (iuo *ItemUpdateOne) SetComplete(b bool) *ItemUpdateOne {
	iuo.complete = &b
	return iuo
}

// SetNillableComplete sets the complete field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableComplete(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetComplete(*b)
	}
	return iuo
}

// SetShoppingID sets the shopping edge to Shopping by id.
func (iuo *ItemUpdateOne) SetShoppingID(id int) *ItemUpdateOne {
	if iuo.shopping == nil {
		iuo.shopping = make(map[int]struct{})
	}
	iuo.shopping[id] = struct{}{}
	return iuo
}

// SetNillableShoppingID sets the shopping edge to Shopping by id if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableShoppingID(id *int) *ItemUpdateOne {
	if id != nil {
		iuo = iuo.SetShoppingID(*id)
	}
	return iuo
}

// SetShopping sets the shopping edge to Shopping.
func (iuo *ItemUpdateOne) SetShopping(s *Shopping) *ItemUpdateOne {
	return iuo.SetShoppingID(s.ID)
}

// ClearShopping clears the shopping edge to Shopping.
func (iuo *ItemUpdateOne) ClearShopping() *ItemUpdateOne {
	iuo.clearedShopping = true
	return iuo
}

// Save executes the query and returns the updated entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	if iuo.product_name != nil {
		if err := item.ProductNameValidator(*iuo.product_name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"product_name\": %v", err)
		}
	}
	if len(iuo.shopping) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"shopping\"")
	}
	return iuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	i, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return i
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (i *Item, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  iuo.id,
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	if value := iuo.product_name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: item.FieldProductName,
		})
	}
	if value := iuo.quantity; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: item.FieldQuantity,
		})
	}
	if value := iuo.addquantity; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: item.FieldQuantity,
		})
	}
	if value := iuo.category_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: item.FieldCategoryID,
		})
	}
	if value := iuo.addcategory_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: item.FieldCategoryID,
		})
	}
	if value := iuo.complete; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: item.FieldComplete,
		})
	}
	if iuo.clearedShopping {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.ShoppingTable,
			Columns: []string{item.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.shopping; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.ShoppingTable,
			Columns: []string{item.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	i = &Item{config: iuo.config}
	_spec.Assign = i.assignValues
	_spec.ScanValues = i.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return i, nil
}
