// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"time"

	"github.com/Frosin/shoplist-api-client-go/ent/item"
	"github.com/Frosin/shoplist-api-client-go/ent/shop"
	"github.com/Frosin/shoplist-api-client-go/ent/shopping"
	"github.com/Frosin/shoplist-api-client-go/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeItem     = "Item"
	TypeShop     = "Shop"
	TypeShopping = "Shopping"
	TypeUser     = "User"
)

// ItemMutation represents an operation that mutate the Items
// nodes in the graph.
type ItemMutation struct {
	config
	op              Op
	typ             string
	id              *int
	product_name    *string
	quantity        *int
	addquantity     *int
	category_id     *int
	addcategory_id  *int
	complete        *bool
	clearedFields   map[string]struct{}
	shopping        *int
	clearedshopping bool
}

var _ ent.Mutation = (*ItemMutation)(nil)

// newItemMutation creates new mutation for $n.Name.
func newItemMutation(c config, op Op) *ItemMutation {
	return &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProductName sets the product_name field.
func (m *ItemMutation) SetProductName(s string) {
	m.product_name = &s
}

// ProductName returns the product_name value in the mutation.
func (m *ItemMutation) ProductName() (r string, exists bool) {
	v := m.product_name
	if v == nil {
		return
	}
	return *v, true
}

// ResetProductName reset all changes of the product_name field.
func (m *ItemMutation) ResetProductName() {
	m.product_name = nil
}

// SetQuantity sets the quantity field.
func (m *ItemMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the quantity value in the mutation.
func (m *ItemMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// AddQuantity adds i to quantity.
func (m *ItemMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the quantity field in this mutation.
func (m *ItemMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity reset all changes of the quantity field.
func (m *ItemMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetCategoryID sets the category_id field.
func (m *ItemMutation) SetCategoryID(i int) {
	m.category_id = &i
	m.addcategory_id = nil
}

// CategoryID returns the category_id value in the mutation.
func (m *ItemMutation) CategoryID() (r int, exists bool) {
	v := m.category_id
	if v == nil {
		return
	}
	return *v, true
}

// AddCategoryID adds i to category_id.
func (m *ItemMutation) AddCategoryID(i int) {
	if m.addcategory_id != nil {
		*m.addcategory_id += i
	} else {
		m.addcategory_id = &i
	}
}

// AddedCategoryID returns the value that was added to the category_id field in this mutation.
func (m *ItemMutation) AddedCategoryID() (r int, exists bool) {
	v := m.addcategory_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCategoryID reset all changes of the category_id field.
func (m *ItemMutation) ResetCategoryID() {
	m.category_id = nil
	m.addcategory_id = nil
}

// SetComplete sets the complete field.
func (m *ItemMutation) SetComplete(b bool) {
	m.complete = &b
}

// Complete returns the complete value in the mutation.
func (m *ItemMutation) Complete() (r bool, exists bool) {
	v := m.complete
	if v == nil {
		return
	}
	return *v, true
}

// ResetComplete reset all changes of the complete field.
func (m *ItemMutation) ResetComplete() {
	m.complete = nil
}

// SetShoppingID sets the shopping edge to Shopping by id.
func (m *ItemMutation) SetShoppingID(id int) {
	m.shopping = &id
}

// ClearShopping clears the shopping edge to Shopping.
func (m *ItemMutation) ClearShopping() {
	m.clearedshopping = true
}

// ShoppingCleared returns if the edge shopping was cleared.
func (m *ItemMutation) ShoppingCleared() bool {
	return m.clearedshopping
}

// ShoppingID returns the shopping id in the mutation.
func (m *ItemMutation) ShoppingID() (id int, exists bool) {
	if m.shopping != nil {
		return *m.shopping, true
	}
	return
}

// ShoppingIDs returns the shopping ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ShoppingID instead. It exists only for internal usage by the builders.
func (m *ItemMutation) ShoppingIDs() (ids []int) {
	if id := m.shopping; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShopping reset all changes of the shopping edge.
func (m *ItemMutation) ResetShopping() {
	m.shopping = nil
	m.clearedshopping = false
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.product_name != nil {
		fields = append(fields, item.FieldProductName)
	}
	if m.quantity != nil {
		fields = append(fields, item.FieldQuantity)
	}
	if m.category_id != nil {
		fields = append(fields, item.FieldCategoryID)
	}
	if m.complete != nil {
		fields = append(fields, item.FieldComplete)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldProductName:
		return m.ProductName()
	case item.FieldQuantity:
		return m.Quantity()
	case item.FieldCategoryID:
		return m.CategoryID()
	case item.FieldComplete:
		return m.Complete()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldProductName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductName(v)
		return nil
	case item.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case item.FieldCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	case item.FieldComplete:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComplete(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ItemMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, item.FieldQuantity)
	}
	if m.addcategory_id != nil {
		fields = append(fields, item.FieldCategoryID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case item.FieldQuantity:
		return m.AddedQuantity()
	case item.FieldCategoryID:
		return m.AddedCategoryID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case item.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case item.FieldCategoryID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCategoryID(v)
		return nil
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldProductName:
		m.ResetProductName()
		return nil
	case item.FieldQuantity:
		m.ResetQuantity()
		return nil
	case item.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	case item.FieldComplete:
		m.ResetComplete()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.shopping != nil {
		edges = append(edges, item.EdgeShopping)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case item.EdgeShopping:
		if id := m.shopping; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedshopping {
		edges = append(edges, item.EdgeShopping)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	switch name {
	case item.EdgeShopping:
		return m.clearedshopping
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	switch name {
	case item.EdgeShopping:
		m.ClearShopping()
		return nil
	}
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	switch name {
	case item.EdgeShopping:
		m.ResetShopping()
		return nil
	}
	return fmt.Errorf("unknown Item edge %s", name)
}

// ShopMutation represents an operation that mutate the Shops
// nodes in the graph.
type ShopMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	clearedFields   map[string]struct{}
	shopping        map[int]struct{}
	removedshopping map[int]struct{}
}

var _ ent.Mutation = (*ShopMutation)(nil)

// newShopMutation creates new mutation for $n.Name.
func newShopMutation(c config, op Op) *ShopMutation {
	return &ShopMutation{
		config:        c,
		op:            op,
		typ:           TypeShop,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShopMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShopMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ShopMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *ShopMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ShopMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// ResetName reset all changes of the name field.
func (m *ShopMutation) ResetName() {
	m.name = nil
}

// AddShoppingIDs adds the shopping edge to Shopping by ids.
func (m *ShopMutation) AddShoppingIDs(ids ...int) {
	if m.shopping == nil {
		m.shopping = make(map[int]struct{})
	}
	for i := range ids {
		m.shopping[ids[i]] = struct{}{}
	}
}

// RemoveShoppingIDs removes the shopping edge to Shopping by ids.
func (m *ShopMutation) RemoveShoppingIDs(ids ...int) {
	if m.removedshopping == nil {
		m.removedshopping = make(map[int]struct{})
	}
	for i := range ids {
		m.removedshopping[ids[i]] = struct{}{}
	}
}

// RemovedShopping returns the removed ids of shopping.
func (m *ShopMutation) RemovedShoppingIDs() (ids []int) {
	for id := range m.removedshopping {
		ids = append(ids, id)
	}
	return
}

// ShoppingIDs returns the shopping ids in the mutation.
func (m *ShopMutation) ShoppingIDs() (ids []int) {
	for id := range m.shopping {
		ids = append(ids, id)
	}
	return
}

// ResetShopping reset all changes of the shopping edge.
func (m *ShopMutation) ResetShopping() {
	m.shopping = nil
	m.removedshopping = nil
}

// Op returns the operation name.
func (m *ShopMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Shop).
func (m *ShopMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ShopMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, shop.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ShopMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shop.FieldName:
		return m.Name()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ShopMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shop.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Shop field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ShopMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ShopMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ShopMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Shop numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ShopMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ShopMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShopMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Shop nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ShopMutation) ResetField(name string) error {
	switch name {
	case shop.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Shop field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ShopMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.shopping != nil {
		edges = append(edges, shop.EdgeShopping)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ShopMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shop.EdgeShopping:
		ids := make([]ent.Value, 0, len(m.shopping))
		for id := range m.shopping {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ShopMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedshopping != nil {
		edges = append(edges, shop.EdgeShopping)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ShopMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shop.EdgeShopping:
		ids := make([]ent.Value, 0, len(m.removedshopping))
		for id := range m.removedshopping {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ShopMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ShopMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ShopMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Shop unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ShopMutation) ResetEdge(name string) error {
	switch name {
	case shop.EdgeShopping:
		m.ResetShopping()
		return nil
	}
	return fmt.Errorf("unknown Shop edge %s", name)
}

// ShoppingMutation represents an operation that mutate the Shoppings
// nodes in the graph.
type ShoppingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	date          *time.Time
	sum           *int
	addsum        *int
	complete      *bool
	clearedFields map[string]struct{}
	item          map[int]struct{}
	removeditem   map[int]struct{}
	shop          *int
	clearedshop   bool
	user          *int
	cleareduser   bool
}

var _ ent.Mutation = (*ShoppingMutation)(nil)

// newShoppingMutation creates new mutation for $n.Name.
func newShoppingMutation(c config, op Op) *ShoppingMutation {
	return &ShoppingMutation{
		config:        c,
		op:            op,
		typ:           TypeShopping,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ShoppingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDate sets the date field.
func (m *ShoppingMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the date value in the mutation.
func (m *ShoppingMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// ResetDate reset all changes of the date field.
func (m *ShoppingMutation) ResetDate() {
	m.date = nil
}

// SetSum sets the sum field.
func (m *ShoppingMutation) SetSum(i int) {
	m.sum = &i
	m.addsum = nil
}

// Sum returns the sum value in the mutation.
func (m *ShoppingMutation) Sum() (r int, exists bool) {
	v := m.sum
	if v == nil {
		return
	}
	return *v, true
}

// AddSum adds i to sum.
func (m *ShoppingMutation) AddSum(i int) {
	if m.addsum != nil {
		*m.addsum += i
	} else {
		m.addsum = &i
	}
}

// AddedSum returns the value that was added to the sum field in this mutation.
func (m *ShoppingMutation) AddedSum() (r int, exists bool) {
	v := m.addsum
	if v == nil {
		return
	}
	return *v, true
}

// ResetSum reset all changes of the sum field.
func (m *ShoppingMutation) ResetSum() {
	m.sum = nil
	m.addsum = nil
}

// SetComplete sets the complete field.
func (m *ShoppingMutation) SetComplete(b bool) {
	m.complete = &b
}

// Complete returns the complete value in the mutation.
func (m *ShoppingMutation) Complete() (r bool, exists bool) {
	v := m.complete
	if v == nil {
		return
	}
	return *v, true
}

// ResetComplete reset all changes of the complete field.
func (m *ShoppingMutation) ResetComplete() {
	m.complete = nil
}

// AddItemIDs adds the item edge to Item by ids.
func (m *ShoppingMutation) AddItemIDs(ids ...int) {
	if m.item == nil {
		m.item = make(map[int]struct{})
	}
	for i := range ids {
		m.item[ids[i]] = struct{}{}
	}
}

// RemoveItemIDs removes the item edge to Item by ids.
func (m *ShoppingMutation) RemoveItemIDs(ids ...int) {
	if m.removeditem == nil {
		m.removeditem = make(map[int]struct{})
	}
	for i := range ids {
		m.removeditem[ids[i]] = struct{}{}
	}
}

// RemovedItem returns the removed ids of item.
func (m *ShoppingMutation) RemovedItemIDs() (ids []int) {
	for id := range m.removeditem {
		ids = append(ids, id)
	}
	return
}

// ItemIDs returns the item ids in the mutation.
func (m *ShoppingMutation) ItemIDs() (ids []int) {
	for id := range m.item {
		ids = append(ids, id)
	}
	return
}

// ResetItem reset all changes of the item edge.
func (m *ShoppingMutation) ResetItem() {
	m.item = nil
	m.removeditem = nil
}

// SetShopID sets the shop edge to Shop by id.
func (m *ShoppingMutation) SetShopID(id int) {
	m.shop = &id
}

// ClearShop clears the shop edge to Shop.
func (m *ShoppingMutation) ClearShop() {
	m.clearedshop = true
}

// ShopCleared returns if the edge shop was cleared.
func (m *ShoppingMutation) ShopCleared() bool {
	return m.clearedshop
}

// ShopID returns the shop id in the mutation.
func (m *ShoppingMutation) ShopID() (id int, exists bool) {
	if m.shop != nil {
		return *m.shop, true
	}
	return
}

// ShopIDs returns the shop ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ShopID instead. It exists only for internal usage by the builders.
func (m *ShoppingMutation) ShopIDs() (ids []int) {
	if id := m.shop; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShop reset all changes of the shop edge.
func (m *ShoppingMutation) ResetShop() {
	m.shop = nil
	m.clearedshop = false
}

// SetUserID sets the user edge to User by id.
func (m *ShoppingMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *ShoppingMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *ShoppingMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *ShoppingMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ShoppingMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the user edge.
func (m *ShoppingMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *ShoppingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Shopping).
func (m *ShoppingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ShoppingMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.date != nil {
		fields = append(fields, shopping.FieldDate)
	}
	if m.sum != nil {
		fields = append(fields, shopping.FieldSum)
	}
	if m.complete != nil {
		fields = append(fields, shopping.FieldComplete)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ShoppingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shopping.FieldDate:
		return m.Date()
	case shopping.FieldSum:
		return m.Sum()
	case shopping.FieldComplete:
		return m.Complete()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ShoppingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shopping.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case shopping.FieldSum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSum(v)
		return nil
	case shopping.FieldComplete:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComplete(v)
		return nil
	}
	return fmt.Errorf("unknown Shopping field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ShoppingMutation) AddedFields() []string {
	var fields []string
	if m.addsum != nil {
		fields = append(fields, shopping.FieldSum)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ShoppingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shopping.FieldSum:
		return m.AddedSum()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ShoppingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shopping.FieldSum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSum(v)
		return nil
	}
	return fmt.Errorf("unknown Shopping numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ShoppingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ShoppingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Shopping nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ShoppingMutation) ResetField(name string) error {
	switch name {
	case shopping.FieldDate:
		m.ResetDate()
		return nil
	case shopping.FieldSum:
		m.ResetSum()
		return nil
	case shopping.FieldComplete:
		m.ResetComplete()
		return nil
	}
	return fmt.Errorf("unknown Shopping field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ShoppingMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.item != nil {
		edges = append(edges, shopping.EdgeItem)
	}
	if m.shop != nil {
		edges = append(edges, shopping.EdgeShop)
	}
	if m.user != nil {
		edges = append(edges, shopping.EdgeUser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ShoppingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shopping.EdgeItem:
		ids := make([]ent.Value, 0, len(m.item))
		for id := range m.item {
			ids = append(ids, id)
		}
		return ids
	case shopping.EdgeShop:
		if id := m.shop; id != nil {
			return []ent.Value{*id}
		}
	case shopping.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ShoppingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeditem != nil {
		edges = append(edges, shopping.EdgeItem)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ShoppingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shopping.EdgeItem:
		ids := make([]ent.Value, 0, len(m.removeditem))
		for id := range m.removeditem {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ShoppingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedshop {
		edges = append(edges, shopping.EdgeShop)
	}
	if m.cleareduser {
		edges = append(edges, shopping.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ShoppingMutation) EdgeCleared(name string) bool {
	switch name {
	case shopping.EdgeShop:
		return m.clearedshop
	case shopping.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ShoppingMutation) ClearEdge(name string) error {
	switch name {
	case shopping.EdgeShop:
		m.ClearShop()
		return nil
	case shopping.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Shopping unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ShoppingMutation) ResetEdge(name string) error {
	switch name {
	case shopping.EdgeItem:
		m.ResetItem()
		return nil
	case shopping.EdgeShop:
		m.ResetShop()
		return nil
	case shopping.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Shopping edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                Op
	typ               string
	id                *int
	telegram_id       *int64
	addtelegram_id    *int64
	telegram_username *string
	comunity_id       *string
	token             *string
	chat_id           *int64
	addchat_id        *int64
	clearedFields     map[string]struct{}
	shopping          map[int]struct{}
	removedshopping   map[int]struct{}
}

var _ ent.Mutation = (*UserMutation)(nil)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op) *UserMutation {
	return &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTelegramID sets the telegram_id field.
func (m *UserMutation) SetTelegramID(i int64) {
	m.telegram_id = &i
	m.addtelegram_id = nil
}

// TelegramID returns the telegram_id value in the mutation.
func (m *UserMutation) TelegramID() (r int64, exists bool) {
	v := m.telegram_id
	if v == nil {
		return
	}
	return *v, true
}

// AddTelegramID adds i to telegram_id.
func (m *UserMutation) AddTelegramID(i int64) {
	if m.addtelegram_id != nil {
		*m.addtelegram_id += i
	} else {
		m.addtelegram_id = &i
	}
}

// AddedTelegramID returns the value that was added to the telegram_id field in this mutation.
func (m *UserMutation) AddedTelegramID() (r int64, exists bool) {
	v := m.addtelegram_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTelegramID reset all changes of the telegram_id field.
func (m *UserMutation) ResetTelegramID() {
	m.telegram_id = nil
	m.addtelegram_id = nil
}

// SetTelegramUsername sets the telegram_username field.
func (m *UserMutation) SetTelegramUsername(s string) {
	m.telegram_username = &s
}

// TelegramUsername returns the telegram_username value in the mutation.
func (m *UserMutation) TelegramUsername() (r string, exists bool) {
	v := m.telegram_username
	if v == nil {
		return
	}
	return *v, true
}

// ResetTelegramUsername reset all changes of the telegram_username field.
func (m *UserMutation) ResetTelegramUsername() {
	m.telegram_username = nil
}

// SetComunityID sets the comunity_id field.
func (m *UserMutation) SetComunityID(s string) {
	m.comunity_id = &s
}

// ComunityID returns the comunity_id value in the mutation.
func (m *UserMutation) ComunityID() (r string, exists bool) {
	v := m.comunity_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetComunityID reset all changes of the comunity_id field.
func (m *UserMutation) ResetComunityID() {
	m.comunity_id = nil
}

// SetToken sets the token field.
func (m *UserMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the token value in the mutation.
func (m *UserMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// ResetToken reset all changes of the token field.
func (m *UserMutation) ResetToken() {
	m.token = nil
}

// SetChatID sets the chat_id field.
func (m *UserMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the chat_id value in the mutation.
func (m *UserMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}
	return *v, true
}

// AddChatID adds i to chat_id.
func (m *UserMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the chat_id field in this mutation.
func (m *UserMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChatID reset all changes of the chat_id field.
func (m *UserMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// AddShoppingIDs adds the shopping edge to Shopping by ids.
func (m *UserMutation) AddShoppingIDs(ids ...int) {
	if m.shopping == nil {
		m.shopping = make(map[int]struct{})
	}
	for i := range ids {
		m.shopping[ids[i]] = struct{}{}
	}
}

// RemoveShoppingIDs removes the shopping edge to Shopping by ids.
func (m *UserMutation) RemoveShoppingIDs(ids ...int) {
	if m.removedshopping == nil {
		m.removedshopping = make(map[int]struct{})
	}
	for i := range ids {
		m.removedshopping[ids[i]] = struct{}{}
	}
}

// RemovedShopping returns the removed ids of shopping.
func (m *UserMutation) RemovedShoppingIDs() (ids []int) {
	for id := range m.removedshopping {
		ids = append(ids, id)
	}
	return
}

// ShoppingIDs returns the shopping ids in the mutation.
func (m *UserMutation) ShoppingIDs() (ids []int) {
	for id := range m.shopping {
		ids = append(ids, id)
	}
	return
}

// ResetShopping reset all changes of the shopping edge.
func (m *UserMutation) ResetShopping() {
	m.shopping = nil
	m.removedshopping = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.telegram_id != nil {
		fields = append(fields, user.FieldTelegramID)
	}
	if m.telegram_username != nil {
		fields = append(fields, user.FieldTelegramUsername)
	}
	if m.comunity_id != nil {
		fields = append(fields, user.FieldComunityID)
	}
	if m.token != nil {
		fields = append(fields, user.FieldToken)
	}
	if m.chat_id != nil {
		fields = append(fields, user.FieldChatID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldTelegramID:
		return m.TelegramID()
	case user.FieldTelegramUsername:
		return m.TelegramUsername()
	case user.FieldComunityID:
		return m.ComunityID()
	case user.FieldToken:
		return m.Token()
	case user.FieldChatID:
		return m.ChatID()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldTelegramID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelegramID(v)
		return nil
	case user.FieldTelegramUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelegramUsername(v)
		return nil
	case user.FieldComunityID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComunityID(v)
		return nil
	case user.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case user.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addtelegram_id != nil {
		fields = append(fields, user.FieldTelegramID)
	}
	if m.addchat_id != nil {
		fields = append(fields, user.FieldChatID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldTelegramID:
		return m.AddedTelegramID()
	case user.FieldChatID:
		return m.AddedChatID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldTelegramID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTelegramID(v)
		return nil
	case user.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChatID(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldTelegramID:
		m.ResetTelegramID()
		return nil
	case user.FieldTelegramUsername:
		m.ResetTelegramUsername()
		return nil
	case user.FieldComunityID:
		m.ResetComunityID()
		return nil
	case user.FieldToken:
		m.ResetToken()
		return nil
	case user.FieldChatID:
		m.ResetChatID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.shopping != nil {
		edges = append(edges, user.EdgeShopping)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeShopping:
		ids := make([]ent.Value, 0, len(m.shopping))
		for id := range m.shopping {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedshopping != nil {
		edges = append(edges, user.EdgeShopping)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeShopping:
		ids := make([]ent.Value, 0, len(m.removedshopping))
		for id := range m.removedshopping {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeShopping:
		m.ResetShopping()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
