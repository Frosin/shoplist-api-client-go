// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/Frosin/shoplist-api-client-go/ent/shop"
	"github.com/Frosin/shoplist-api-client-go/ent/shopping"
	"github.com/Frosin/shoplist-api-client-go/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Shopping is the model entity for the Shopping schema.
type Shopping struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Sum holds the value of the "sum" field.
	Sum int `json:"sum,omitempty"`
	// Complete holds the value of the "complete" field.
	Complete bool `json:"complete,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShoppingQuery when eager-loading is set.
	Edges   ShoppingEdges `json:"edges"`
	shop_id *int
	user_id *int
}

// ShoppingEdges holds the relations/edges for other nodes in the graph.
type ShoppingEdges struct {
	// Item holds the value of the item edge.
	Item []*Item
	// Shop holds the value of the shop edge.
	Shop *Shop
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading.
func (e ShoppingEdges) ItemOrErr() ([]*Item, error) {
	if e.loadedTypes[0] {
		return e.Item, nil
	}
	return nil, &NotLoadedError{edge: "item"}
}

// ShopOrErr returns the Shop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingEdges) ShopOrErr() (*Shop, error) {
	if e.loadedTypes[1] {
		if e.Shop == nil {
			// The edge shop was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shop.Label}
		}
		return e.Shop, nil
	}
	return nil, &NotLoadedError{edge: "shop"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shopping) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // date
		&sql.NullInt64{}, // sum
		&sql.NullBool{},  // complete
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Shopping) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // shop_id
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shopping fields.
func (s *Shopping) assignValues(values ...interface{}) error {
	if m, n := len(values), len(shopping.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[0])
	} else if value.Valid {
		s.Date = value.Time
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field sum", values[1])
	} else if value.Valid {
		s.Sum = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field complete", values[2])
	} else if value.Valid {
		s.Complete = value.Bool
	}
	values = values[3:]
	if len(values) == len(shopping.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field shop_id", value)
		} else if value.Valid {
			s.shop_id = new(int)
			*s.shop_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			s.user_id = new(int)
			*s.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryItem queries the item edge of the Shopping.
func (s *Shopping) QueryItem() *ItemQuery {
	return (&ShoppingClient{s.config}).QueryItem(s)
}

// QueryShop queries the shop edge of the Shopping.
func (s *Shopping) QueryShop() *ShopQuery {
	return (&ShoppingClient{s.config}).QueryShop(s)
}

// QueryUser queries the user edge of the Shopping.
func (s *Shopping) QueryUser() *UserQuery {
	return (&ShoppingClient{s.config}).QueryUser(s)
}

// Update returns a builder for updating this Shopping.
// Note that, you need to call Shopping.Unwrap() before calling this method, if this Shopping
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shopping) Update() *ShoppingUpdateOne {
	return (&ShoppingClient{s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Shopping) Unwrap() *Shopping {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shopping is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shopping) String() string {
	var builder strings.Builder
	builder.WriteString("Shopping(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", date=")
	builder.WriteString(s.Date.Format(time.ANSIC))
	builder.WriteString(", sum=")
	builder.WriteString(fmt.Sprintf("%v", s.Sum))
	builder.WriteString(", complete=")
	builder.WriteString(fmt.Sprintf("%v", s.Complete))
	builder.WriteByte(')')
	return builder.String()
}

// Shoppings is a parsable slice of Shopping.
type Shoppings []*Shopping

func (s Shoppings) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
