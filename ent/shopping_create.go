// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/Frosin/shoplist-api-client-go/ent/item"
	"github.com/Frosin/shoplist-api-client-go/ent/shop"
	"github.com/Frosin/shoplist-api-client-go/ent/shopping"
	"github.com/Frosin/shoplist-api-client-go/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ShoppingCreate is the builder for creating a Shopping entity.
type ShoppingCreate struct {
	config
	mutation *ShoppingMutation
	hooks    []Hook
}

// SetDate sets the date field.
func (sc *ShoppingCreate) SetDate(t time.Time) *ShoppingCreate {
	sc.mutation.SetDate(t)
	return sc
}

// SetNillableDate sets the date field if the given value is not nil.
func (sc *ShoppingCreate) SetNillableDate(t *time.Time) *ShoppingCreate {
	if t != nil {
		sc.SetDate(*t)
	}
	return sc
}

// SetSum sets the sum field.
func (sc *ShoppingCreate) SetSum(i int) *ShoppingCreate {
	sc.mutation.SetSum(i)
	return sc
}

// SetNillableSum sets the sum field if the given value is not nil.
func (sc *ShoppingCreate) SetNillableSum(i *int) *ShoppingCreate {
	if i != nil {
		sc.SetSum(*i)
	}
	return sc
}

// SetComplete sets the complete field.
func (sc *ShoppingCreate) SetComplete(b bool) *ShoppingCreate {
	sc.mutation.SetComplete(b)
	return sc
}

// SetNillableComplete sets the complete field if the given value is not nil.
func (sc *ShoppingCreate) SetNillableComplete(b *bool) *ShoppingCreate {
	if b != nil {
		sc.SetComplete(*b)
	}
	return sc
}

// SetType sets the type field.
func (sc *ShoppingCreate) SetType(i int) *ShoppingCreate {
	sc.mutation.SetType(i)
	return sc
}

// SetNillableType sets the type field if the given value is not nil.
func (sc *ShoppingCreate) SetNillableType(i *int) *ShoppingCreate {
	if i != nil {
		sc.SetType(*i)
	}
	return sc
}

// AddItemIDs adds the item edge to Item by ids.
func (sc *ShoppingCreate) AddItemIDs(ids ...int) *ShoppingCreate {
	sc.mutation.AddItemIDs(ids...)
	return sc
}

// AddItem adds the item edges to Item.
func (sc *ShoppingCreate) AddItem(i ...*Item) *ShoppingCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sc.AddItemIDs(ids...)
}

// SetShopID sets the shop edge to Shop by id.
func (sc *ShoppingCreate) SetShopID(id int) *ShoppingCreate {
	sc.mutation.SetShopID(id)
	return sc
}

// SetNillableShopID sets the shop edge to Shop by id if the given value is not nil.
func (sc *ShoppingCreate) SetNillableShopID(id *int) *ShoppingCreate {
	if id != nil {
		sc = sc.SetShopID(*id)
	}
	return sc
}

// SetShop sets the shop edge to Shop.
func (sc *ShoppingCreate) SetShop(s *Shop) *ShoppingCreate {
	return sc.SetShopID(s.ID)
}

// SetUserID sets the user edge to User by id.
func (sc *ShoppingCreate) SetUserID(id int) *ShoppingCreate {
	sc.mutation.SetUserID(id)
	return sc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (sc *ShoppingCreate) SetNillableUserID(id *int) *ShoppingCreate {
	if id != nil {
		sc = sc.SetUserID(*id)
	}
	return sc
}

// SetUser sets the user edge to User.
func (sc *ShoppingCreate) SetUser(u *User) *ShoppingCreate {
	return sc.SetUserID(u.ID)
}

// Save creates the Shopping in the database.
func (sc *ShoppingCreate) Save(ctx context.Context) (*Shopping, error) {
	if _, ok := sc.mutation.Date(); !ok {
		v := shopping.DefaultDate()
		sc.mutation.SetDate(v)
	}
	if _, ok := sc.mutation.Sum(); !ok {
		v := shopping.DefaultSum
		sc.mutation.SetSum(v)
	}
	if _, ok := sc.mutation.Complete(); !ok {
		v := shopping.DefaultComplete
		sc.mutation.SetComplete(v)
	}
	if _, ok := sc.mutation.GetType(); !ok {
		v := shopping.DefaultType
		sc.mutation.SetType(v)
	}
	var (
		err  error
		node *Shopping
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShoppingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShoppingCreate) SaveX(ctx context.Context) *Shopping {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *ShoppingCreate) sqlSave(ctx context.Context) (*Shopping, error) {
	var (
		s     = &Shopping{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shopping.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shopping.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shopping.FieldDate,
		})
		s.Date = value
	}
	if value, ok := sc.mutation.Sum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldSum,
		})
		s.Sum = value
	}
	if value, ok := sc.mutation.Complete(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: shopping.FieldComplete,
		})
		s.Complete = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: shopping.FieldType,
		})
		s.Type = value
	}
	if nodes := sc.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.ShopTable,
			Columns: []string{shopping.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.UserTable,
			Columns: []string{shopping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}
