// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/Frosin/shoplist-api-client-go/ent/item"
	"github.com/Frosin/shoplist-api-client-go/ent/predicate"
	"github.com/Frosin/shoplist-api-client-go/ent/shop"
	"github.com/Frosin/shoplist-api-client-go/ent/shopping"
	"github.com/Frosin/shoplist-api-client-go/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ShoppingUpdate is the builder for updating Shopping entities.
type ShoppingUpdate struct {
	config
	date        *time.Time
	sum         *int
	addsum      *int
	complete    *bool
	item        map[int]struct{}
	shop        map[int]struct{}
	user        map[int]struct{}
	removedItem map[int]struct{}
	clearedShop bool
	clearedUser bool
	predicates  []predicate.Shopping
}

// Where adds a new predicate for the builder.
func (su *ShoppingUpdate) Where(ps ...predicate.Shopping) *ShoppingUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetDate sets the date field.
func (su *ShoppingUpdate) SetDate(t time.Time) *ShoppingUpdate {
	su.date = &t
	return su
}

// SetNillableDate sets the date field if the given value is not nil.
func (su *ShoppingUpdate) SetNillableDate(t *time.Time) *ShoppingUpdate {
	if t != nil {
		su.SetDate(*t)
	}
	return su
}

// SetSum sets the sum field.
func (su *ShoppingUpdate) SetSum(i int) *ShoppingUpdate {
	su.sum = &i
	su.addsum = nil
	return su
}

// SetNillableSum sets the sum field if the given value is not nil.
func (su *ShoppingUpdate) SetNillableSum(i *int) *ShoppingUpdate {
	if i != nil {
		su.SetSum(*i)
	}
	return su
}

// AddSum adds i to sum.
func (su *ShoppingUpdate) AddSum(i int) *ShoppingUpdate {
	if su.addsum == nil {
		su.addsum = &i
	} else {
		*su.addsum += i
	}
	return su
}

// SetComplete sets the complete field.
func (su *ShoppingUpdate) SetComplete(b bool) *ShoppingUpdate {
	su.complete = &b
	return su
}

// SetNillableComplete sets the complete field if the given value is not nil.
func (su *ShoppingUpdate) SetNillableComplete(b *bool) *ShoppingUpdate {
	if b != nil {
		su.SetComplete(*b)
	}
	return su
}

// AddItemIDs adds the item edge to Item by ids.
func (su *ShoppingUpdate) AddItemIDs(ids ...int) *ShoppingUpdate {
	if su.item == nil {
		su.item = make(map[int]struct{})
	}
	for i := range ids {
		su.item[ids[i]] = struct{}{}
	}
	return su
}

// AddItem adds the item edges to Item.
func (su *ShoppingUpdate) AddItem(i ...*Item) *ShoppingUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.AddItemIDs(ids...)
}

// SetShopID sets the shop edge to Shop by id.
func (su *ShoppingUpdate) SetShopID(id int) *ShoppingUpdate {
	if su.shop == nil {
		su.shop = make(map[int]struct{})
	}
	su.shop[id] = struct{}{}
	return su
}

// SetNillableShopID sets the shop edge to Shop by id if the given value is not nil.
func (su *ShoppingUpdate) SetNillableShopID(id *int) *ShoppingUpdate {
	if id != nil {
		su = su.SetShopID(*id)
	}
	return su
}

// SetShop sets the shop edge to Shop.
func (su *ShoppingUpdate) SetShop(s *Shop) *ShoppingUpdate {
	return su.SetShopID(s.ID)
}

// SetUserID sets the user edge to User by id.
func (su *ShoppingUpdate) SetUserID(id int) *ShoppingUpdate {
	if su.user == nil {
		su.user = make(map[int]struct{})
	}
	su.user[id] = struct{}{}
	return su
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (su *ShoppingUpdate) SetNillableUserID(id *int) *ShoppingUpdate {
	if id != nil {
		su = su.SetUserID(*id)
	}
	return su
}

// SetUser sets the user edge to User.
func (su *ShoppingUpdate) SetUser(u *User) *ShoppingUpdate {
	return su.SetUserID(u.ID)
}

// RemoveItemIDs removes the item edge to Item by ids.
func (su *ShoppingUpdate) RemoveItemIDs(ids ...int) *ShoppingUpdate {
	if su.removedItem == nil {
		su.removedItem = make(map[int]struct{})
	}
	for i := range ids {
		su.removedItem[ids[i]] = struct{}{}
	}
	return su
}

// RemoveItem removes item edges to Item.
func (su *ShoppingUpdate) RemoveItem(i ...*Item) *ShoppingUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.RemoveItemIDs(ids...)
}

// ClearShop clears the shop edge to Shop.
func (su *ShoppingUpdate) ClearShop() *ShoppingUpdate {
	su.clearedShop = true
	return su
}

// ClearUser clears the user edge to User.
func (su *ShoppingUpdate) ClearUser() *ShoppingUpdate {
	su.clearedUser = true
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *ShoppingUpdate) Save(ctx context.Context) (int, error) {
	if len(su.shop) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"shop\"")
	}
	if len(su.user) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShoppingUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShoppingUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShoppingUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ShoppingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shopping.Table,
			Columns: shopping.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shopping.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := su.date; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: shopping.FieldDate,
		})
	}
	if value := su.sum; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: shopping.FieldSum,
		})
	}
	if value := su.addsum; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: shopping.FieldSum,
		})
	}
	if value := su.complete; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: shopping.FieldComplete,
		})
	}
	if nodes := su.removedItem; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.item; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.clearedShop {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.ShopTable,
			Columns: []string{shopping.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.shop; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.ShopTable,
			Columns: []string{shopping.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shop.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.clearedUser {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.UserTable,
			Columns: []string{shopping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.UserTable,
			Columns: []string{shopping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ShoppingUpdateOne is the builder for updating a single Shopping entity.
type ShoppingUpdateOne struct {
	config
	id          int
	date        *time.Time
	sum         *int
	addsum      *int
	complete    *bool
	item        map[int]struct{}
	shop        map[int]struct{}
	user        map[int]struct{}
	removedItem map[int]struct{}
	clearedShop bool
	clearedUser bool
}

// SetDate sets the date field.
func (suo *ShoppingUpdateOne) SetDate(t time.Time) *ShoppingUpdateOne {
	suo.date = &t
	return suo
}

// SetNillableDate sets the date field if the given value is not nil.
func (suo *ShoppingUpdateOne) SetNillableDate(t *time.Time) *ShoppingUpdateOne {
	if t != nil {
		suo.SetDate(*t)
	}
	return suo
}

// SetSum sets the sum field.
func (suo *ShoppingUpdateOne) SetSum(i int) *ShoppingUpdateOne {
	suo.sum = &i
	suo.addsum = nil
	return suo
}

// SetNillableSum sets the sum field if the given value is not nil.
func (suo *ShoppingUpdateOne) SetNillableSum(i *int) *ShoppingUpdateOne {
	if i != nil {
		suo.SetSum(*i)
	}
	return suo
}

// AddSum adds i to sum.
func (suo *ShoppingUpdateOne) AddSum(i int) *ShoppingUpdateOne {
	if suo.addsum == nil {
		suo.addsum = &i
	} else {
		*suo.addsum += i
	}
	return suo
}

// SetComplete sets the complete field.
func (suo *ShoppingUpdateOne) SetComplete(b bool) *ShoppingUpdateOne {
	suo.complete = &b
	return suo
}

// SetNillableComplete sets the complete field if the given value is not nil.
func (suo *ShoppingUpdateOne) SetNillableComplete(b *bool) *ShoppingUpdateOne {
	if b != nil {
		suo.SetComplete(*b)
	}
	return suo
}

// AddItemIDs adds the item edge to Item by ids.
func (suo *ShoppingUpdateOne) AddItemIDs(ids ...int) *ShoppingUpdateOne {
	if suo.item == nil {
		suo.item = make(map[int]struct{})
	}
	for i := range ids {
		suo.item[ids[i]] = struct{}{}
	}
	return suo
}

// AddItem adds the item edges to Item.
func (suo *ShoppingUpdateOne) AddItem(i ...*Item) *ShoppingUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.AddItemIDs(ids...)
}

// SetShopID sets the shop edge to Shop by id.
func (suo *ShoppingUpdateOne) SetShopID(id int) *ShoppingUpdateOne {
	if suo.shop == nil {
		suo.shop = make(map[int]struct{})
	}
	suo.shop[id] = struct{}{}
	return suo
}

// SetNillableShopID sets the shop edge to Shop by id if the given value is not nil.
func (suo *ShoppingUpdateOne) SetNillableShopID(id *int) *ShoppingUpdateOne {
	if id != nil {
		suo = suo.SetShopID(*id)
	}
	return suo
}

// SetShop sets the shop edge to Shop.
func (suo *ShoppingUpdateOne) SetShop(s *Shop) *ShoppingUpdateOne {
	return suo.SetShopID(s.ID)
}

// SetUserID sets the user edge to User by id.
func (suo *ShoppingUpdateOne) SetUserID(id int) *ShoppingUpdateOne {
	if suo.user == nil {
		suo.user = make(map[int]struct{})
	}
	suo.user[id] = struct{}{}
	return suo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (suo *ShoppingUpdateOne) SetNillableUserID(id *int) *ShoppingUpdateOne {
	if id != nil {
		suo = suo.SetUserID(*id)
	}
	return suo
}

// SetUser sets the user edge to User.
func (suo *ShoppingUpdateOne) SetUser(u *User) *ShoppingUpdateOne {
	return suo.SetUserID(u.ID)
}

// RemoveItemIDs removes the item edge to Item by ids.
func (suo *ShoppingUpdateOne) RemoveItemIDs(ids ...int) *ShoppingUpdateOne {
	if suo.removedItem == nil {
		suo.removedItem = make(map[int]struct{})
	}
	for i := range ids {
		suo.removedItem[ids[i]] = struct{}{}
	}
	return suo
}

// RemoveItem removes item edges to Item.
func (suo *ShoppingUpdateOne) RemoveItem(i ...*Item) *ShoppingUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.RemoveItemIDs(ids...)
}

// ClearShop clears the shop edge to Shop.
func (suo *ShoppingUpdateOne) ClearShop() *ShoppingUpdateOne {
	suo.clearedShop = true
	return suo
}

// ClearUser clears the user edge to User.
func (suo *ShoppingUpdateOne) ClearUser() *ShoppingUpdateOne {
	suo.clearedUser = true
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *ShoppingUpdateOne) Save(ctx context.Context) (*Shopping, error) {
	if len(suo.shop) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"shop\"")
	}
	if len(suo.user) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShoppingUpdateOne) SaveX(ctx context.Context) *Shopping {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *ShoppingUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShoppingUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ShoppingUpdateOne) sqlSave(ctx context.Context) (s *Shopping, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shopping.Table,
			Columns: shopping.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  suo.id,
				Type:   field.TypeInt,
				Column: shopping.FieldID,
			},
		},
	}
	if value := suo.date; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: shopping.FieldDate,
		})
	}
	if value := suo.sum; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: shopping.FieldSum,
		})
	}
	if value := suo.addsum; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: shopping.FieldSum,
		})
	}
	if value := suo.complete; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: shopping.FieldComplete,
		})
	}
	if nodes := suo.removedItem; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.item; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shopping.ItemTable,
			Columns: []string{shopping.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.clearedShop {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.ShopTable,
			Columns: []string{shopping.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.shop; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.ShopTable,
			Columns: []string{shopping.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shop.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.clearedUser {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.UserTable,
			Columns: []string{shopping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shopping.UserTable,
			Columns: []string{shopping.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Shopping{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
