// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Frosin/shoplist-api-client-go/ent/predicate"
	"github.com/Frosin/shoplist-api-client-go/ent/shopping"
	"github.com/Frosin/shoplist-api-client-go/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config

	telegram_username *string
	comunity_id       *string

	shopping        map[int]struct{}
	removedShopping map[int]struct{}
	predicates      []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetTelegramUsername sets the telegram_username field.
func (uu *UserUpdate) SetTelegramUsername(s string) *UserUpdate {
	uu.telegram_username = &s
	return uu
}

// SetComunityID sets the comunity_id field.
func (uu *UserUpdate) SetComunityID(s string) *UserUpdate {
	uu.comunity_id = &s
	return uu
}

// AddShoppingIDs adds the shopping edge to Shopping by ids.
func (uu *UserUpdate) AddShoppingIDs(ids ...int) *UserUpdate {
	if uu.shopping == nil {
		uu.shopping = make(map[int]struct{})
	}
	for i := range ids {
		uu.shopping[ids[i]] = struct{}{}
	}
	return uu
}

// AddShopping adds the shopping edges to Shopping.
func (uu *UserUpdate) AddShopping(s ...*Shopping) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddShoppingIDs(ids...)
}

// RemoveShoppingIDs removes the shopping edge to Shopping by ids.
func (uu *UserUpdate) RemoveShoppingIDs(ids ...int) *UserUpdate {
	if uu.removedShopping == nil {
		uu.removedShopping = make(map[int]struct{})
	}
	for i := range ids {
		uu.removedShopping[ids[i]] = struct{}{}
	}
	return uu
}

// RemoveShopping removes shopping edges to Shopping.
func (uu *UserUpdate) RemoveShopping(s ...*Shopping) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveShoppingIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if uu.telegram_username != nil {
		if err := user.TelegramUsernameValidator(*uu.telegram_username); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"telegram_username\": %v", err)
		}
	}
	if uu.comunity_id != nil {
		if err := user.ComunityIDValidator(*uu.comunity_id); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"comunity_id\": %v", err)
		}
	}
	return uu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := uu.telegram_username; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldTelegramUsername,
		})
	}
	if value := uu.comunity_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldComunityID,
		})
	}
	if nodes := uu.removedShopping; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShoppingTable,
			Columns: []string{user.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.shopping; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShoppingTable,
			Columns: []string{user.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	id int

	telegram_username *string
	comunity_id       *string

	shopping        map[int]struct{}
	removedShopping map[int]struct{}
}

// SetTelegramUsername sets the telegram_username field.
func (uuo *UserUpdateOne) SetTelegramUsername(s string) *UserUpdateOne {
	uuo.telegram_username = &s
	return uuo
}

// SetComunityID sets the comunity_id field.
func (uuo *UserUpdateOne) SetComunityID(s string) *UserUpdateOne {
	uuo.comunity_id = &s
	return uuo
}

// AddShoppingIDs adds the shopping edge to Shopping by ids.
func (uuo *UserUpdateOne) AddShoppingIDs(ids ...int) *UserUpdateOne {
	if uuo.shopping == nil {
		uuo.shopping = make(map[int]struct{})
	}
	for i := range ids {
		uuo.shopping[ids[i]] = struct{}{}
	}
	return uuo
}

// AddShopping adds the shopping edges to Shopping.
func (uuo *UserUpdateOne) AddShopping(s ...*Shopping) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddShoppingIDs(ids...)
}

// RemoveShoppingIDs removes the shopping edge to Shopping by ids.
func (uuo *UserUpdateOne) RemoveShoppingIDs(ids ...int) *UserUpdateOne {
	if uuo.removedShopping == nil {
		uuo.removedShopping = make(map[int]struct{})
	}
	for i := range ids {
		uuo.removedShopping[ids[i]] = struct{}{}
	}
	return uuo
}

// RemoveShopping removes shopping edges to Shopping.
func (uuo *UserUpdateOne) RemoveShopping(s ...*Shopping) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveShoppingIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if uuo.telegram_username != nil {
		if err := user.TelegramUsernameValidator(*uuo.telegram_username); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"telegram_username\": %v", err)
		}
	}
	if uuo.comunity_id != nil {
		if err := user.ComunityIDValidator(*uuo.comunity_id); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"comunity_id\": %v", err)
		}
	}
	return uuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  uuo.id,
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if value := uuo.telegram_username; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldTelegramUsername,
		})
	}
	if value := uuo.comunity_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldComunityID,
		})
	}
	if nodes := uuo.removedShopping; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShoppingTable,
			Columns: []string{user.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.shopping; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShoppingTable,
			Columns: []string{user.ShoppingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	u = &User{config: uuo.config}
	_spec.Assign = u.assignValues
	_spec.ScanValues = u.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
