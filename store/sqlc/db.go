// Code generated by sqlc. DO NOT EDIT.

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getComingShoppingsStmt, err = db.PrepareContext(ctx, getComingShoppings); err != nil {
		return nil, fmt.Errorf("error preparing query GetComingShoppings: %w", err)
	}
	if q.getGoodsByShoppingIDStmt, err = db.PrepareContext(ctx, getGoodsByShoppingID); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoodsByShoppingID: %w", err)
	}
	if q.getLastShoppingStmt, err = db.PrepareContext(ctx, getLastShopping); err != nil {
		return nil, fmt.Errorf("error preparing query GetLastShopping: %w", err)
	}
	if q.getShopByIDStmt, err = db.PrepareContext(ctx, getShopByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetShopByID: %w", err)
	}
	if q.getShopByNameStmt, err = db.PrepareContext(ctx, getShopByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetShopByName: %w", err)
	}
	if q.getShoppingByIDStmt, err = db.PrepareContext(ctx, getShoppingByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetShoppingByID: %w", err)
	}
	if q.getShoppingDaysStmt, err = db.PrepareContext(ctx, getShoppingDays); err != nil {
		return nil, fmt.Errorf("error preparing query GetShoppingDays: %w", err)
	}
	if q.getShoppingsByDayStmt, err = db.PrepareContext(ctx, getShoppingsByDay); err != nil {
		return nil, fmt.Errorf("error preparing query GetShoppingsByDay: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByTelegramIDStmt, err = db.PrepareContext(ctx, getUserByTelegramID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByTelegramID: %w", err)
	}
	if q.getUserByTokenStmt, err = db.PrepareContext(ctx, getUserByToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByToken: %w", err)
	}
	if q.getUsersByComunityIDStmt, err = db.PrepareContext(ctx, getUsersByComunityID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersByComunityID: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getComingShoppingsStmt != nil {
		if cerr := q.getComingShoppingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getComingShoppingsStmt: %w", cerr)
		}
	}
	if q.getGoodsByShoppingIDStmt != nil {
		if cerr := q.getGoodsByShoppingIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoodsByShoppingIDStmt: %w", cerr)
		}
	}
	if q.getLastShoppingStmt != nil {
		if cerr := q.getLastShoppingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLastShoppingStmt: %w", cerr)
		}
	}
	if q.getShopByIDStmt != nil {
		if cerr := q.getShopByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShopByIDStmt: %w", cerr)
		}
	}
	if q.getShopByNameStmt != nil {
		if cerr := q.getShopByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShopByNameStmt: %w", cerr)
		}
	}
	if q.getShoppingByIDStmt != nil {
		if cerr := q.getShoppingByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShoppingByIDStmt: %w", cerr)
		}
	}
	if q.getShoppingDaysStmt != nil {
		if cerr := q.getShoppingDaysStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShoppingDaysStmt: %w", cerr)
		}
	}
	if q.getShoppingsByDayStmt != nil {
		if cerr := q.getShoppingsByDayStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShoppingsByDayStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByTelegramIDStmt != nil {
		if cerr := q.getUserByTelegramIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByTelegramIDStmt: %w", cerr)
		}
	}
	if q.getUserByTokenStmt != nil {
		if cerr := q.getUserByTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByTokenStmt: %w", cerr)
		}
	}
	if q.getUsersByComunityIDStmt != nil {
		if cerr := q.getUsersByComunityIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersByComunityIDStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	getComingShoppingsStmt   *sql.Stmt
	getGoodsByShoppingIDStmt *sql.Stmt
	getLastShoppingStmt      *sql.Stmt
	getShopByIDStmt          *sql.Stmt
	getShopByNameStmt        *sql.Stmt
	getShoppingByIDStmt      *sql.Stmt
	getShoppingDaysStmt      *sql.Stmt
	getShoppingsByDayStmt    *sql.Stmt
	getUserByIDStmt          *sql.Stmt
	getUserByTelegramIDStmt  *sql.Stmt
	getUserByTokenStmt       *sql.Stmt
	getUsersByComunityIDStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		getComingShoppingsStmt:   q.getComingShoppingsStmt,
		getGoodsByShoppingIDStmt: q.getGoodsByShoppingIDStmt,
		getLastShoppingStmt:      q.getLastShoppingStmt,
		getShopByIDStmt:          q.getShopByIDStmt,
		getShopByNameStmt:        q.getShopByNameStmt,
		getShoppingByIDStmt:      q.getShoppingByIDStmt,
		getShoppingDaysStmt:      q.getShoppingDaysStmt,
		getShoppingsByDayStmt:    q.getShoppingsByDayStmt,
		getUserByIDStmt:          q.getUserByIDStmt,
		getUserByTelegramIDStmt:  q.getUserByTelegramIDStmt,
		getUserByTokenStmt:       q.getUserByTokenStmt,
		getUsersByComunityIDStmt: q.getUsersByComunityIDStmt,
	}
}
